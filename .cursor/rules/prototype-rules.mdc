---
description: 
globs: 
alwaysApply: true
---
---
description: GOV.UK Prototype Kit Rules
alwaysApply: true
---

# GOV.UK Prototype Kit - Copilot Rules

<!-- Generated by Copilot -->

## Project Overview
This project is a web application built using the GOV.UK Prototype Kit for rapid prototyping of user-centered services. The application is:
- Accessible and user-friendly
- Compliant with government standards
- Used for gathering user feedback and iterating on design concepts

## Technical Framework
- **Server-side**: Node.js and Express
- **Templating**: Nunjucks
- **UI Components**: GOV.UK Design System
- **Infrastructure**: Using Prototype Kit's built-in routing and templating features

## Folder Structure
```
[root]/
├── app/
│   ├── views/           # All templates
│   │   ├── layouts/     # Layout templates
│   │   ├── components/  # Reusable components
│   ├── routes.js        # Route definitions
```

## Code Standards

### Templates
- Use Nunjucks macros from GOV.UK Design System
- Always include macro imports at the top of templates:
  ```nunjucks
  {% from "govuk/components/input/macro.njk" import govukInput %}
  {% from "govuk/components/button/macro.njk" import govukButton %}
  ```

### Form Pages with Caption and Page Heading as Label

For pages where you need a single form element with:
- A page heading (h1) that also serves as the input label
- A caption above the heading

Use this approach:

1. Add proper macro imports at the top:
   ```nunjucks
   {% from "govuk/components/input/macro.njk" import govukInput %}
   {% from "govuk/components/button/macro.njk" import govukButton %}
   {% from "govuk/components/error-summary/macro.njk" import govukErrorSummary %}
   ```

2. Define the page heading separately:
   ```nunjucks
   {% set pageHeadingTextHTML %}
   Page heading text
   {% endset %}
   ```

3. Place the caption outside the input component but before it:
   ```nunjucks
   {% if data['caption-data-value'] %}
   <span class="govuk-caption-l">{{ data['caption-data-value'] }}</span>
   {% endif %}
   ```

4. Use the govukInput macro with isPageHeading set to true:
   ```nunjucks
   {{ govukInput({
       label: {
           text: pageHeadingTextHTML,
           classes: "govuk-label--l",
           isPageHeading: true
       },
       hint: {
           text: "Hint text if needed"
       },
       id: "input-id",
       name: "input-name",
       value: data['input-name'],
       classes: "govuk-input--width-20",
       errorMessage: {
           text: "Error message"
       } if data['error-type'] == "true"
   }) }}
   ```

This approach ensures the page remains accessible while allowing the heading to serve as the form label and maintaining the caption functionality.

### User Data
- Persist user answers in `req.session`
- Display collected data on "Check your answers" pages

### Validation & Accessibility
- Return validation errors with `govukErrorSummary`
- Add per-field error items
- Meet WCAG 2.2 AA standards
- Follow Home Office accessibility poster guidance:
  - Appropriate colour contrast
  - Visible focus styles
  - Error feedback announced via `aria-live`
  - All inputs properly labelled

### Content Design
- Follow GOV.UK style guide:
  - Sentence case
  - ISO date format (e.g., "24 April 2025")
  - Plain English
  - No ampersands
  - Active voice
- Front-load key information
- One idea per sentence
- Address users directly using first person

### Code Organization
- Define and reuse Nunjucks filters (e.g., `toMonth`, `toMoney`)
- Separate data from presentation
- Add a comment `Generated by Copilot` to every Copilot-created file

### UI Components
Use GOV.UK Design System components for:
- Form elements (inputs, checkboxes, radio buttons)
- Error messages and validation feedback
- Success messages and confirmation screens
- Navigation elements including phase banners
- Information display (tables, lists, alerts)
- Progress indicators and loading states

## Version Management

Ringfence your prototype versions using date-based versioning:

1. Create new version folders named by date in the format `YYYY-MM-DD` (e.g., `2025-05-02`) in both:
   - `/app/views/versions/[date]`
   - `/app/routes/versions/[date]`
2. Each version should be a self-contained journey
3. Update the index page in app/views to reflect the new version with appropriate links and tags
4. Always link to the specific start point for each version (e.g., `/versions/2025-05-02/check/start`)
5. Use tags to indicate version status:
   - `govuk-tag--yellow` for "In progress"
   - `govuk-tag--green` for "Finished"

### Non-Date-Based Versions

For feature-based versions (rather than date-based):

1. Use descriptive names for the version folder (e.g., `multiple-sites`, `mvp`) in both:
   - `/app/views/versions/[feature-name]`
   - `/app/routes/versions/[feature-name]`
2. When copying from an existing version, be sure to update path references in route files by changing:
   ```javascript
   let version = "versions/original-name/";
   ```
   to:
   ```javascript
   let version = "versions/new-feature-name/";
   ```
3. Include in the index.html file following the same pattern as date-based versions

Example folder structure:
```
app/
  views/
    versions/
      2025-05-02/           # Date-based version
        check/
          start.html
      multiple-sites/       # Feature-based version
        check/
          start.html
  routes/
    versions/
      2025-05-02/           # Routes for date-based version
        check.js
      multiple-sites/       # Routes for feature-based version
        check.js
```

Example version index entry:
```nunjucks
{# In app/views/index.html #}
<!-- Start of iteration X -->
<strong class="govuk-tag govuk-tag--yellow" style="float:right">In progress</strong>
<h2 class="govuk-heading-m">Iteration X</h2>

<p><a href="versions/2025-05-02/check/start" class="govuk-link--no-visited-state">Start the iteration X journey</a></p>

<p>Brief description of what's new in this version.</p>

<details class="govuk-details govuk-!-margin-bottom-2">
  <summary class="govuk-details__summary">
    <span class="govuk-details__summary-text">
     The scenarios to follow for this iteration
    </span>
  </summary>
  <div class="govuk-details__text">
    <p>Scenario description here</p>
  </div>
</details>

<details class="govuk-details">
  <summary class="govuk-details__summary">
    <span class="govuk-details__summary-text">
      Internal shortcuts
    </span>
  </summary>
  <div class="govuk-details__text">
    <ul class="govuk-list govuk-list--spaced">
      <li><a href="versions/2025-05-02/check/exemption" class="govuk-link--no-visited-state">Exemption page</a></li>
      <!-- Other shortcuts -->
    </ul>
  </div>
</details>

<hr class="govuk-section-break govuk-section-break--m govuk-section-break--visible">
<!-- End of iteration X -->
```

When creating a new version:
1. Copy the most recent version folder and rename it with the current date
2. Update corresponding route files with the same date structure
3. Update the index page to include the new version with appropriate links and status tag

## Routing and Error Handling

### Route File Organization

The prototype uses a modular routing structure where each section of the application has its own route file:

```
app/
  routes/
    versions/
      2025-05-02/
        exemption.js    # Routes for exemption journey
        sites.js        # Routes for site management
        account.js      # Routes for account management
        check.js        # Routes for checking processes
```

Each route file follows these conventions:

1. Define version and section variables for path construction:
   ```javascript
   let version = "versions/2025-05-02/";
   let section = "exemption/";
   ```

2. Export a function that accepts the router as a parameter:
   ```javascript
   module.exports = function(router) {
     // Route definitions
   }
   ```

3. Define routes using the version and section variables:
   ```javascript
   router.post('/' + version + section + 'page-name-router', function(req, res) {
     // Route handling logic
   });
   ```

### Form Validation Pattern

Form validation consistently follows this pattern:

1. Reset error flags at the beginning of the POST route:
   ```javascript
   req.session.data['errorthispage'] = "false";
   req.session.data['errortypeone'] = "false";
   ```

2. Perform validation checks:
   ```javascript
   const inputValue = req.session.data['input-name'];
   if (!inputValue || inputValue.trim() === "") {
     req.session.data['errorthispage'] = "true";
     req.session.data['errortypeone'] = "true";
   }
   ```

3. Redirect based on validation results:
   ```javascript
   if (req.session.data['errorthispage'] === "true") {
     res.redirect('page-name');
   } else {
     // Set completion status for task list
     req.session.data['section-status'] = 'completed';
     
     // Check if returning to check answers page
     if (req.session.data['camefromcheckanswers'] === 'true') {
       req.session.data['camefromcheckanswers'] = false;
       res.redirect('check-answers#section-anchor');
     } else {
       res.redirect('next-page');
     }
   }
   ```

### Data Clearing Functions

For complex workflows where user inputs are dependent on previous selections:

1. Define functions that clear related data:
   ```javascript
   function clearRelatedData(session) {
     delete session.data['field-one'];
     delete session.data['field-two'];
     // Clear other related fields
   }
   ```

2. Call these functions when selections change:
   ```javascript
   if (previousSelection !== currentSelection) {
     clearRelatedData(req.session);
   }
   ```

### Task List Management

To track completion status for the task list:

1. Update status after successful form submission:
   ```javascript
   req.session.data['section-name-status'] = 'completed';
   ```

2. Use this status in the task list template to show completion indicators

### Complex Form Validation

For multi-part forms (e.g., coordinate entry forms):

1. Create specific error flags for each field:
   ```javascript
   req.session.data[`error-field-name`] = "false";
   ```

2. Build an errors array for the error summary:
   ```javascript
   req.session.data['errors'] = [];
   
   if (fieldIsInvalid) {
     req.session.data[`error-field-name`] = "true";
     req.session.data['errors'].push({
       text: "Error message for this field",
       anchor: "field-id"
     });
   }
   ```

3. Use these in templates to highlight specific fields and create accessible error messages

### Conditional Routing

For handling complex user journeys with multiple possible paths:

```javascript
router.post('/' + version + section + 'decision-page-router', function(req, res) {
  const selection = req.session.data['decision-radio-buttons'];
  
  switch(selection) {
    case "Option A":
      res.redirect('option-a-page');
      break;
    case "Option B":
      res.redirect('option-b-page');
      break;
    default:
      // Handle no selection
      req.session.data['errorthispage'] = "true";
      res.redirect('decision-page');
  }
});
```

### Error Handling in Templates

In your Nunjucks templates, use the error flags and error arrays consistently:

```nunjucks
{% if data['errorthispage'] == "true" %}
  {{ govukErrorSummary({
    titleText: "There is a problem",
    errorList: data['errors'] if data['errors'] else [
      {
        text: errorTextHTML,
        href: "#field-id"
      }
    ]
  }) }}
{% endif %}

{{ govukInput({
  label: {
    text: "Field label"
  },
  id: "field-id",
  name: "field-name",
  value: data['field-name'],
  errorMessage: {
    text: "Error message"
  } if data['error-field-name'] == "true"
}) }}
```

IMPORTANT: When defining variables that will be rendered in the UI, such as error messages, do NOT include HTML comments inside the variable block as they will be rendered. For example:

```nunjucks
/* INCORRECT - Comments will appear in rendered output */
{% set errorTextHTML %}
    <!-- This comment will show in the error message -->
    {% if data['errortypeone'] == "true" %}
    Select how you want to provide the coordinates
    {% endif %}
{% endset %}

/* CORRECT - Place comments outside the variable block */
<!-- Error message for when nothing is selected -->
{% set errorTextHTML %}
    {% if data['errortypeone'] == "true" %}
    Select how you want to provide the coordinates
    {% endif %}
{% endset %}
```

## Resources

- [GOV.UK Prototype Kit documentation](mdc:https:/govuk-prototype-kit.herokuapp.com/docs)
- [GOV.UK Design System](mdc:https:/design-system.service.gov.uk)
- [Original blog post by Vicky Teinaki](mdc:https:/www.vickyteinaki.com/blog/more-efficient-prototyping-with-the-gov-uk-prototype-kit-step-by-step)

Generated by Copilot

