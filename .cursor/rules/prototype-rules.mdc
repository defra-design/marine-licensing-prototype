---
description: 
globs: 
alwaysApply: true
---
---
description: GOV.UK Prototype Kit Rules
alwaysApply: true
---

# GOV.UK Prototype Kit - Copilot Rules

<!-- Generated by Copilot -->

## Project Overview
This project is a web application built using the GOV.UK Prototype Kit for rapid prototyping of user-centered services. The application is:
- Accessible and user-friendly
- Compliant with government standards
- Used for gathering user feedback and iterating on design concepts

## Technical Framework
- **Server-side**: Node.js and Express
- **Templating**: Nunjucks
- **UI Components**: GOV.UK Design System
- **Infrastructure**: Using Prototype Kit's built-in routing and templating features

## Folder Structure
```
[root]/
├── app/
│   ├── views/           # All templates
│   │   ├── layouts/     # Layout templates
│   │   ├── components/  # Reusable components
│   ├── routes.js        # Route definitions
```

## Code Standards

### Templates
- Use Nunjucks macros from GOV.UK Design System
- Always include macro imports at the top of templates:
  ```nunjucks
  {% from "govuk/components/input/macro.njk" import govukInput %}
  {% from "govuk/components/button/macro.njk" import govukButton %}
  ```

### Form Pages with Caption and Page Heading as Label

For pages where you need a single form element with:
- A page heading (h1) that also serves as the input label
- A caption above the heading

Use this approach:

1. Add proper macro imports at the top:
   ```nunjucks
   {% from "govuk/components/input/macro.njk" import govukInput %}
   {% from "govuk/components/button/macro.njk" import govukButton %}
   {% from "govuk/components/error-summary/macro.njk" import govukErrorSummary %}
   ```

2. Define the page heading separately:
   ```nunjucks
   {% set pageHeadingTextHTML %}
   Page heading text
   {% endset %}
   ```

3. Place the caption outside the input component but before it:
   ```nunjucks
   {% if data['caption-data-value'] %}
   <span class="govuk-caption-l">{{ data['caption-data-value'] }}</span>
   {% endif %}
   ```

4. Use the govukInput macro with isPageHeading set to true:
   ```nunjucks
   {{ govukInput({
       label: {
           text: pageHeadingTextHTML,
           classes: "govuk-label--l",
           isPageHeading: true
       },
       hint: {
           text: "Hint text if needed"
       },
       id: "input-id",
       name: "input-name",
       value: data['input-name'],
       classes: "govuk-input--width-20",
       errorMessage: {
           text: "Error message"
       } if data['error-type'] == "true"
   }) }}
   ```

This approach ensures the page remains accessible while allowing the heading to serve as the form label and maintaining the caption functionality.

### User Data
- Persist user answers in `req.session`
- Display collected data on "Check your answers" pages

### Validation & Accessibility
- Return validation errors with `govukErrorSummary`
- Add per-field error items
- **Never include HTML comments in error message variables** - comments will be displayed to users
- Meet WCAG 2.2 AA standards
- Follow Home Office accessibility poster guidance:
  - Appropriate colour contrast
  - Visible focus styles
  - Error feedback announced via `aria-live`
  - All inputs properly labelled

### Content Design
- Follow GOV.UK style guide:
  - Sentence case
  - ISO date format (e.g., "24 April 2025")
  - Plain English
  - No ampersands
  - Active voice
- Front-load key information
- One idea per sentence
- Address users directly using first person

### Code Organization
- Define and reuse Nunjucks filters (e.g., `toMonth`, `toMoney`)
- Separate data from presentation
- Add a comment `Generated by Copilot` to every Copilot-created file

### UI Components
Use GOV.UK Design System components for:
- Form elements (inputs, checkboxes, radio buttons)
- Error messages and validation feedback
- Success messages and confirmation screens
- Navigation elements including phase banners
- Information display (tables, lists, alerts)
- Progress indicators and loading states

## Version Management

The prototype uses a versioned approach to manage different iterations and features. Each version is self-contained with its own views and routes.

### Version Types
- **Date-based versions**: Use format `YYYY-MM-DD` (e.g., `2025-05-02`) for time-based iterations
- **Feature-based versions**: Use descriptive names (e.g., `multiple-sites`, `mvp`, `multiple-sites-v2`) for feature-specific development

### Creating New Versions

For detailed step-by-step instructions on creating new versions, see the [Version Creation Guide](mdc:docs/version-creation-guide.md).

**Quick summary:**
1. Copy existing version folders (views and routes)
2. Update version variables in all route files
3. Update hardcoded paths in templates and special files
4. Add route includes to main `routes.js`
5. Add version section to index page
6. Test and verify functionality

### Version Status Tags
- `govuk-tag--yellow` for "In progress"
- `govuk-tag--green` for "Finished"

## Routing and Error Handling

For detailed routing patterns and error handling conventions, see the [Routing and Error Handling Guide](mdc:docs/routing-and-error-handling.md).

**Key patterns:**
- Use modular route files with version and section variables
- Follow consistent form validation patterns with error flags
- Implement data clearing functions for complex workflows
- Use error arrays for accessible error summaries

## Resources

- [GOV.UK Prototype Kit documentation](mdc:https:/govuk-prototype-kit.herokuapp.com/docs)
- [GOV.UK Design System](mdc:https:/design-system.service.gov.uk)
- [Original blog post by Vicky Teinaki](mdc:https:/www.vickyteinaki.com/blog/more-efficient-prototyping-with-the-gov-uk-prototype-kit-step-by-step)

Generated by Copilot

