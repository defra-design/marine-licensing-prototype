---               # 1️⃣  YAML front-matter opens
alwaysApply: true # 2️⃣  tell Cursor this rule is “Always”
description: GOV.UK Prototype Kit conventions   # optional but useful
# globs: "*.njk"  # leave out or empty when you use alwaysApply
---               # 3️⃣  YAML front-matter closes

# GOV.UK Prototype Kit - Cursor Rules

## Project Overview
This project is a web application built using the GOV.UK Prototype Kit for rapid prototyping of user-centered services. The application is:
- Accessible and user-friendly
- Compliant with government standards
- Used for gathering user feedback and iterating on design concepts

## Technical Framework
- **Server-side**: Node.js and Express
- **Templating**: Nunjucks
- **UI Components**: GOV.UK Design System
- **Infrastructure**: Using Prototype Kit's built-in routing and templating features

## Folder Structure
```
[root]/
├── app/
│   ├── views/           # All templates
│   │   ├── layouts/     # Layout templates
│   │   ├── components/  # Reusable components
│   │   └── versions/    # Version-specific views
│   ├── routes/          # Route definitions
│   │   └── versions/    # Version-specific routes
│   └── routes.js        # Main route includes
├── docs/                # Project documentation
└── .cursor/rules/       # AI context rules
```

## Marine Licensing System Architecture

### Batch System for Site Management
The prototype uses a **batch system** to manage multiple sites that can be entered via different methods:

```javascript
// Batch structure - ALWAYS use this pattern for site management
{
  id: 'batch_id',
  entryMethod: 'file-upload' | 'manual-entry',
  createdAt: timestamp,
  settings: {
    sameActivityDates: "Yes" | "No" | null,
    sameActivityDescription: "Yes" | "No" | null,
    sharedStartDate: { day: '', month: '', year: '' },
    sharedEndDate: { day: '', month: '', year: '' },
    sharedDescription: 'text' | null
  },
  sites: [
    {
      globalNumber: 1,  // Sequential across ALL batches
      batchId: 'batch_id',
      entryMethod: 'file-upload' | 'manual-entry',
      name: 'Site name',
      startDate: { day: '', month: '', year: '' },
      endDate: { day: '', month: '', year: '' },
      description: 'Activity description',
      coordinates: {},
      // ... other site fields
    }
  ]
}
```

### Core Batch Functions
**ALWAYS use these functions for site management:**

```javascript
// Primary batch functions
initializeBatch(session, entryMethod)          // Creates new batch
getCurrentBatch(session)                       // Gets active batch
addSiteToBatch(session, siteData)             // Adds site with auto-assigned globalNumber
findSiteByGlobalNumber(session, globalNumber) // Finds specific site
renumberSitesAfterDeletion(session, deletedGlobalNumber) // Handles deletion
clearCurrentBatchOnly(session)                // Clears only current batch

// Navigation helpers
setOriginContext(session, origin)             // Tracks where user came from
updateReviewState(session, action)            // Tracks review page state
determineUserState(session)                   // Determines cancel behavior state
```

### Site Numbering Rules
- **Global numbering**: Sites numbered sequentially across ALL batches (1, 2, 3, 4...)
- **Batch-relative**: Position within specific batch (1st in batch, 2nd in batch...)
- **Renumbering**: When site deleted, all higher-numbered sites automatically renumber down
- **Templates**: Always use `site.globalNumber or loop.index` for display

## Code Standards

### Templates
- Use Nunjucks macros from GOV.UK Design System
- Always include macro imports at the top of templates:
  ```nunjucks
  {% from "govuk/components/input/macro.njk" import govukInput %}
  {% from "govuk/components/button/macro.njk" import govukButton %}
  ```

### Form Pages with Caption and Page Heading as Label

For pages where you need a single form element with:
- A page heading (h1) that also serves as the input label
- A caption above the heading

Use this approach:

1. Add proper macro imports at the top:
   ```nunjucks
   {% from "govuk/components/input/macro.njk" import govukInput %}
   {% from "govuk/components/button/macro.njk" import govukButton %}
   {% from "govuk/components/error-summary/macro.njk" import govukErrorSummary %}
   ```

2. Define the page heading separately:
   ```nunjucks
   {% set pageHeadingTextHTML %}
   Page heading text
   {% endset %}
   ```

3. Place the caption outside the input component but before it:
   ```nunjucks
   {% if data['caption-data-value'] %}
   <span class="govuk-caption-l">{{ data['caption-data-value'] }}</span>
   {% endif %}
   ```

4. Use the govukInput macro with isPageHeading set to true:
   ```nunjucks
   {{ govukInput({
       label: {
           text: pageHeadingTextHTML,
           classes: "govuk-label--l",
           isPageHeading: true
       },
       hint: {
           text: "Hint text if needed"
       },
       id: "input-id",
       name: "input-name",
       value: data['input-name'],
       classes: "govuk-input--width-20",
       errorMessage: {
           text: "Error message"
       } if data['error-type'] == "true"
   }) }}
   ```

### Caption Placement Rules

**Project-level captions with site numbers**: Combine project name and site number in a single caption above the h1 element
```nunjucks
<span class="govuk-caption-l">{{ data['exemption-project-name-text-input'] }}<span class="govuk-!-display-block">Site {{ displaySiteNumber }}</span></span>
<h1 class="govuk-heading-l">Page heading</h1>
```

**For form inputs with labels**:
```nunjucks
<span class="govuk-caption-l">{{ data['exemption-project-name-text-input'] }}<span class="govuk-!-display-block">Site {{ displaySiteNumber }}</span></span>
<h1 class="govuk-label-wrapper">
  <label class="govuk-label govuk-label--l" for="input-id">
    {{ pageHeadingTextHTML }}
  </label>
</h1>
```

**For govukRadios with HTML legends**:
```nunjucks
html: '<span class="govuk-caption-l">' + data['exemption-project-name-text-input'] + '<span class="govuk-!-display-block">Site ' + displaySiteNumber + '</span></span>' + pageHeadingTextHTML
```

### User Data
- Persist user answers in `req.session`
- **Use batch system for site data** - never store sites directly in session
- Display collected data on "Check your answers" pages

### Validation & Accessibility
- Return validation errors with `govukErrorSummary`
- Add per-field error items
- **Never include HTML comments in error message variables** - comments will be displayed to users
- Meet WCAG 2.2 AA standards
- Follow Home Office accessibility poster guidance:
  - Appropriate colour contrast
  - Visible focus styles
  - Error feedback announced via `aria-live`
  - All inputs properly labelled

### Content Design
- Follow GOV.UK style guide:
  - Sentence case
  - ISO date format (e.g., "24 April 2025")
  - Plain English
  - No ampersands
  - Active voice
- Front-load key information
- One idea per sentence
- Address users directly using first person

### Code Organization
- Define and reuse Nunjucks filters (e.g., `toMonth`, `toMoney`)
- Separate data from presentation

### UI Components
Use GOV.UK Design System components for:
- Form elements (inputs, checkboxes, radio buttons)
- Error messages and validation feedback
- Success messages and confirmation screens
- Navigation elements including phase banners
- Information display (tables, lists, alerts)
- Progress indicators and loading states

## Routing Patterns

### Route Organization
- Use modular route files with version and section variables
- Follow consistent form validation patterns with error flags
- Implement data clearing functions for complex workflows
- Use error arrays for accessible error summaries

### Cancel Link Implementation
**CRITICAL**: Cancel links must follow proper state detection patterns:

```javascript
// Determine user state for cancel behavior
const userState = determineUserState(req.session); // 'creation' | 'creation-review' | 'review-not-saved' | 'review-saved'
const origin = determineOrigin(session); // 'task-list' | 'your-sites' | 'check-answers'

// Cancel behavior by state:
switch(userState) {
  case 'creation':
    clearCurrentBatchOnly(req.session);
    res.redirect('task-list');
    break;
  case 'creation-review':
    res.redirect('review-site-details');
    break;
  case 'review-not-saved':
    res.redirect('cancel'); // Warning page
    break;
  case 'review-saved':
    // Route by origin
    break;
}
```

### Organisation User Journey

The prototype supports two distinct user journeys: an **individual user journey** and an **organisation user journey**. The organisation journey is designed for users who may work on behalf of multiple organisations.

**Journey Initiation:**

- The organisation journey is initiated by adding the query parameter `user_type=organisation` to the start link in `index.html`.
- This sets `req.session.data['user_type'] = 'organisation'`, which is used to differentiate the user type throughout the session.

**Flow:**

1.  **Sign-in:** The `sign-in-router` checks for `req.session.data['user_type']`. If it's an organisation user, they are redirected to the `organisation-selector` page.
2.  **Organisation Selection:** The user selects an organisation from a list. The selected organisation is stored in `req.session.data['organisation-name']`.
3.  **Organisation Switcher:** On subsequent pages, the `organisation-switcher.html` component is displayed, showing the selected organisation and allowing the user to change it. This component is conditionally included in templates based on the presence of `req.session.data['organisation-name']`.

**Session Data:**

- `req.session.data['user_type']`:  `'organisation'` or `undefined`. Determines the user journey.
- `req.session.data['organisation-name']`: Stores the name of the selected organisation.

**Cancellation:**

- The `user_type` and `organisation-name` session variables are cleared in the `clearAllSiteDetails`, `clearCurrentBatchOnly` and `clearCurrentBatchSafely` functions to ensure a clean state when a user cancels their journey.

### Routing Modification Rules
- **Only modify the specific routing section you are working on** - never change unrelated routes
- When working on manual entry flows, only modify routes under the "Manual Entry Flow Routes" section
- When working on main exemption flows, only modify routes in the main exemption section
- Always verify that your changes are isolated to the intended flow/section
- Use clear section comments to identify different routing areas (e.g., `//////////////////////////////////////////////////////////////////////////////////////////////`)
- If unsure which section to modify, ask for clarification before making changes

## Version Management

The prototype uses a versioned approach to manage different iterations and features. Each version is self-contained with its own views and routes.

### Version Types
- **Date-based versions**: Use format `YYYY-MM-DD` (e.g., `2025-05-02`) for time-based iterations
- **Feature-based versions**: Use descriptive names (e.g., `multiple-sites`, `mvp`, `multiple-sites-v2`) for feature-specific development

### Creating New Versions

For detailed step-by-step instructions on creating new versions, see the [Version Creation Guide](mdc:docs/version-creation-guide.md).

**Quick summary:**
1. Copy existing version folders (views and routes)
2. Update version variables in all route files
3. Update hardcoded paths in templates and special files
4. Add route includes to main `routes.js`
5. Add version section to index page
6. Test and verify functionality

### Version Status Tags
- `govuk-tag--yellow` for "In progress"
- `govuk-tag--green` for "Finished"

## Routing and Error Handling

For detailed routing patterns and error handling conventions, see the [Routing and Error Handling Guide](mdc:docs/routing-and-error-handling.md).

**Key patterns:**
- Use modular route files with version and section variables
- Follow consistent form validation patterns with error flags
- Implement data clearing functions for complex workflows
- Use error arrays for accessible error summaries

## Resources

- [GOV.UK Prototype Kit documentation](mdc:https:/govuk-prototype-kit.herokuapp.com/docs)
- [GOV.UK Design System](mdc:https:/design-system.service.gov.uk)
- [Original blog post by Vicky Teinaki](mdc:https:/www.vickyteinaki.com/blog/more-efficient-prototyping-with-the-gov-uk-prototype-kit-step-by-step)

Generated by Copilot


Generated by Copilot

