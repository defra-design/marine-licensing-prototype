// Generated by Copilot

module.exports = function (router) {
    let version = "versions/multiple-sites-v2/";
    let section = "exemption/";

//////////////////////////////////////////////////////////////////////////////////////////////
// Manual Entry Flow Routes
//////////////////////////////////////////////////////////////////////////////////////////////

// Does your project involve more than one site? - GET route
router.get('/' + version + section + 'manual-entry/does-your-project-involve-more-than-one-site', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errors'] = [];
    
    res.render(version + section + 'manual-entry/does-your-project-involve-more-than-one-site');
});

// Does your project involve more than one site? - POST route
router.post('/' + version + section + 'manual-entry/does-your-project-involve-more-than-one-site-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const selection = req.session.data['manual-multiple-sites'];

    if (!selection) {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        res.redirect('does-your-project-involve-more-than-one-site');
        return;
    }

    // Route based on selection
    switch(selection) {
        case "Yes":
            res.redirect('site-name');
            break;
        case "No":
            res.redirect('../stop');
            break;
        default:
            res.redirect('does-your-project-involve-more-than-one-site');
    }
});

// Site name - GET route
router.get('/' + version + section + 'manual-entry/site-name', function (req, res) {
    // Clear all error states completely
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errors'] = [];
    
    // Get site number from query parameter
    const siteNumber = req.query.site || 1;
    req.session.data['current-site'] = siteNumber;
    
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    // Pass query parameters to template
    res.render(version + section + 'manual-entry/site-name', {
        query: req.query
    });
});

// Site name - POST route
router.post('/' + version + section + 'manual-entry/site-name-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const siteNumber = req.query.site || req.session.data['current-site'] || 1;
    const siteDataKey = siteNumber == 1 ? 'manual-site-name-text-input' : 'manual-site-' + siteNumber + '-name-text-input';
    const siteName = req.session.data[siteDataKey];
    const returnTo = req.query.returnTo;

    if (!siteName || siteName.trim() === "") {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        const redirectUrl = 'site-name' + (siteNumber > 1 ? '?site=' + siteNumber : '') + (returnTo ? (siteNumber > 1 ? '&' : '?') + 'returnTo=' + returnTo : '');
        res.redirect(redirectUrl);
        return;
    }

    // Always update the current site counter to the highest site we've seen
    if (!req.session.data['manual-current-site'] || siteNumber > req.session.data['manual-current-site']) {
        req.session.data['manual-current-site'] = siteNumber;
    }

    // Check if we're coming from review-site-details page
    if (req.session.data['fromReviewSiteDetails'] === 'true') {
        delete req.session.data['fromReviewSiteDetails']; // Clear the flag
        return res.redirect('review-site-details');
    }

    // For Site 1, go through the full flow
    if (siteNumber == 1) {
        res.redirect('same-activity-dates');
    } else {
        // For subsequent sites, check if dates are same for all sites
        if (req.session.data['manual-same-activity-dates'] === "Yes") {
            // If dates are same, check description setting
            if (req.session.data['manual-same-activity-description'] === "Yes") {
                // Both same, go straight to coordinate entry
                res.redirect('how-do-you-want-to-enter-the-coordinates?site=' + siteNumber);
            } else {
                // Dates same, description different - ask for site-specific description
                res.redirect('individual-site-activity-description?site=' + siteNumber);
            }
        } else {
            // Dates are different, need to ask for site-specific dates
            res.redirect('individual-site-activity-dates?site=' + siteNumber);
        }
    }
});

// Are the activity dates the same for every site? - GET route
router.get('/' + version + section + 'manual-entry/same-activity-dates', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errors'] = [];
    
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'manual-entry/same-activity-dates');
});

// Are the activity dates the same for every site? - POST route
router.post('/' + version + section + 'manual-entry/same-activity-dates-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const selection = req.session.data['manual-same-activity-dates'];
    const returnTo = req.query.returnTo;

    if (!selection) {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        res.redirect('same-activity-dates' + (returnTo ? '?returnTo=' + returnTo : ''));
        return;
    }

    // Check if we're coming from review-site-details page
    if (req.session.data['fromReviewSiteDetails'] === 'true') {
        delete req.session.data['fromReviewSiteDetails']; // Clear the flag
        return res.redirect('review-site-details');
    }

    // Route based on selection
    switch(selection) {
        case "Yes":
            res.redirect('activity-dates');
            break;
        case "No":
            res.redirect('individual-site-activity-dates');
            break;
        default:
            res.redirect('same-activity-dates');
    }
});

// Individual site activity dates - GET route
router.get('/' + version + section + 'manual-entry/individual-site-activity-dates', function (req, res) {
    req.session.data['startdateerror'] = "false";
    req.session.data['enddateerror'] = "false";
    req.session.data['errors'] = [];
    
    // Get site number from query parameter
    const siteNumber = req.query.site || 1;
    req.session.data['current-site'] = siteNumber;
    
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'manual-entry/individual-site-activity-dates');
});

// Individual site activity dates - POST route
router.post('/' + version + section + 'manual-entry/individual-site-activity-dates-router', function (req, res) {
    req.session.data['startdateerror'] = "false";
    req.session.data['enddateerror'] = "false";

    const siteNumber = req.query.site || req.session.data['current-site'] || 1;
    const sitePrefix = siteNumber == 1 ? 'manual-' : 'manual-site-' + siteNumber + '-';
    
    const startDay = req.session.data[sitePrefix + 'start-date-date-input-day'];
    const startMonth = req.session.data[sitePrefix + 'start-date-date-input-month'];
    const startYear = req.session.data[sitePrefix + 'start-date-date-input-year'];

    const endDay = req.session.data[sitePrefix + 'end-date-date-input-day'];
    const endMonth = req.session.data[sitePrefix + 'end-date-date-input-month'];
    const endYear = req.session.data[sitePrefix + 'end-date-date-input-year'];
    
    const returnTo = req.query.returnTo;

    if (!startDay || !startMonth || !startYear) {
        req.session.data['startdateerror'] = "true";
    }

    if (!endDay || !endMonth || !endYear) {
        req.session.data['enddateerror'] = "true";
    }

    if (req.session.data['startdateerror'] === "true" || req.session.data['enddateerror'] === "true") {
        const redirectUrl = 'individual-site-activity-dates' + (siteNumber > 1 ? '?site=' + siteNumber : '') + (returnTo ? (siteNumber > 1 ? '&' : '?') + 'returnTo=' + returnTo : '');
        return res.redirect(redirectUrl);
    }

    // Check if we're coming from review-site-details page
    if (req.session.data['fromReviewSiteDetails'] === 'true') {
        delete req.session.data['fromReviewSiteDetails']; // Clear the flag
        return res.redirect('review-site-details');
    }

    // For Site 1, continue with normal flow
    if (siteNumber == 1) {
        res.redirect('same-activity-description');
    } else {
        // For subsequent sites, check description setting
        if (req.session.data['manual-same-activity-description'] === "Yes") {
            // Description is same, go to coordinate entry
            res.redirect('how-do-you-want-to-enter-the-coordinates?site=' + siteNumber);
        } else {
            // Description is different, ask for site-specific description
            res.redirect('individual-site-activity-description?site=' + siteNumber);
        }
    }
});

// Activity dates - GET route
router.get('/' + version + section + 'manual-entry/activity-dates', function (req, res) {
    req.session.data['startdateerror'] = "false";
    req.session.data['enddateerror'] = "false";
    req.session.data['errors'] = [];
    
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'manual-entry/activity-dates');
});

// Activity dates - POST route
router.post('/' + version + section + 'manual-entry/activity-dates-router', function (req, res) {
    req.session.data['startdateerror'] = "false";
    req.session.data['enddateerror'] = "false";

    const startDay = req.session.data['manual-start-date-date-input-day'];
    const startMonth = req.session.data['manual-start-date-date-input-month'];
    const startYear = req.session.data['manual-start-date-date-input-year'];

    const endDay = req.session.data['manual-end-date-date-input-day'];
    const endMonth = req.session.data['manual-end-date-date-input-month'];
    const endYear = req.session.data['manual-end-date-date-input-year'];
    
    const returnTo = req.query.returnTo;

    if (!startDay || !startMonth || !startYear) {
        req.session.data['startdateerror'] = "true";
    }

    if (!endDay || !endMonth || !endYear) {
        req.session.data['enddateerror'] = "true";
    }

    if (req.session.data['startdateerror'] === "true" || req.session.data['enddateerror'] === "true") {
        return res.redirect('activity-dates' + (returnTo ? '?returnTo=' + returnTo : ''));
    }

    // Check if we're coming from review-site-details page
    if (req.session.data['fromReviewSiteDetails'] === 'true') {
        delete req.session.data['fromReviewSiteDetails']; // Clear the flag
        return res.redirect('review-site-details');
    }

    res.redirect('same-activity-description');
});

// Is the activity description the same for every site? - GET route
router.get('/' + version + section + 'manual-entry/same-activity-description', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errors'] = [];
    
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'manual-entry/same-activity-description');
});

// Is the activity description the same for every site? - POST route
router.post('/' + version + section + 'manual-entry/same-activity-description-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const selection = req.session.data['manual-same-activity-description'];
    const returnTo = req.query.returnTo;

    if (!selection) {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        res.redirect('same-activity-description' + (returnTo ? '?returnTo=' + returnTo : ''));
        return;
    }

    // Check if we're coming from review-site-details page
    if (req.session.data['fromReviewSiteDetails'] === 'true') {
        delete req.session.data['fromReviewSiteDetails']; // Clear the flag
        return res.redirect('review-site-details');
    }

    // Route based on selection
    switch(selection) {
        case "Yes":
            res.redirect('activity-description');
            break;
        case "No":
            res.redirect('individual-site-activity-description');
            break;
        default:
            res.redirect('same-activity-description');
    }
});

// Individual site activity description - GET route
router.get('/' + version + section + 'manual-entry/individual-site-activity-description', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errors'] = [];
    
    // Get site number from query parameter
    const siteNumber = req.query.site || 1;
    req.session.data['current-site'] = siteNumber;
    
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'manual-entry/individual-site-activity-description');
});

// Individual site activity description - POST route
router.post('/' + version + section + 'manual-entry/individual-site-activity-description-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const siteNumber = req.query.site || req.session.data['current-site'] || 1;
    const siteDataKey = siteNumber == 1 ? 'manual-activity-details-text-area' : 'manual-site-' + siteNumber + '-activity-details-text-area';
    const description = req.session.data[siteDataKey];
    const returnTo = req.query.returnTo;

    if (!description || description.trim() === "") {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        const redirectUrl = 'individual-site-activity-description' + (siteNumber > 1 ? '?site=' + siteNumber : '') + (returnTo ? (siteNumber > 1 ? '&' : '?') + 'returnTo=' + returnTo : '');
        res.redirect(redirectUrl);
        return;
    }

    // Check if we're coming from review-site-details page
    if (req.session.data['fromReviewSiteDetails'] === 'true') {
        delete req.session.data['fromReviewSiteDetails']; // Clear the flag
        return res.redirect('review-site-details');
    }

    if (siteNumber == 1) {
        res.redirect('how-do-you-want-to-enter-the-coordinates');
    } else {
        res.redirect('how-do-you-want-to-enter-the-coordinates?site=' + siteNumber);
    }
});

// Activity description - GET route
router.get('/' + version + section + 'manual-entry/activity-description', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errors'] = [];
    
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'manual-entry/activity-description');
});

// Activity description - POST route
router.post('/' + version + section + 'manual-entry/activity-description-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const description = req.session.data['manual-activity-details-text-area'];
    const returnTo = req.query.returnTo;

    if (!description || description.trim() === "") {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        res.redirect('activity-description' + (returnTo ? '?returnTo=' + returnTo : ''));
        return;
    }

    // Check if we're coming from review-site-details page
    if (req.session.data['fromReviewSiteDetails'] === 'true') {
        delete req.session.data['fromReviewSiteDetails']; // Clear the flag
        return res.redirect('review-site-details');
    }

    res.redirect('how-do-you-want-to-enter-the-coordinates');
});

// How do you want to enter the coordinates? - GET route
router.get('/' + version + section + 'manual-entry/how-do-you-want-to-enter-the-coordinates', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errors'] = [];
    
    // Get site number from query parameter
    const siteNumber = req.query.site || 1;
    req.session.data['current-site'] = siteNumber;
    
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'manual-entry/how-do-you-want-to-enter-the-coordinates');
});

// How do you want to enter the coordinates? - POST route
router.post('/' + version + section + 'manual-entry/how-do-you-want-to-enter-the-coordinates-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const siteNumber = req.query.site || req.session.data['current-site'] || 1;
    const siteDataKey = siteNumber == 1 ? 'manual-coordinate-entry-method' : 'manual-site-' + siteNumber + '-coordinate-entry-method';
    const selection = req.session.data[siteDataKey];
    const clearSubsequent = req.query.clearSubsequent;
    const returnTo = req.query.returnTo;

    if (!selection) {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        const redirectUrl = 'how-do-you-want-to-enter-the-coordinates' + (siteNumber > 1 ? '?site=' + siteNumber : '') + (returnTo ? (siteNumber > 1 ? '&' : '?') + 'returnTo=' + returnTo : '');
        res.redirect(redirectUrl);
        return;
    }

    // If clearSubsequent is true OR returning from review, clear coordinate-related data
    if (clearSubsequent === 'true' || req.session.data['fromReviewSiteDetails'] === 'true') {
        const sitePrefix = siteNumber == 1 ? 'manual-' : 'manual-site-' + siteNumber + '-';
        
        // Clear coordinate system
        req.session.data[sitePrefix + 'coordinate-system-radios'] = '';
        
        // Clear coordinate data
        req.session.data[sitePrefix + 'latitude'] = '';
        req.session.data[sitePrefix + 'longitude'] = '';
        req.session.data[sitePrefix + 'site-width'] = '';
        
        // Clear multiple coordinates
        for (let i = 1; i <= 5; i++) {
            req.session.data[sitePrefix + `coordinates-point-${i}-latitude`] = '';
            req.session.data[sitePrefix + `coordinates-point-${i}-longitude`] = '';
        }
    }

    // Clear the fromReviewSiteDetails flag if it was set
    if (req.session.data['fromReviewSiteDetails'] === 'true') {
        delete req.session.data['fromReviewSiteDetails'];
    }

    // Route based on selection
    switch(selection) {
        case "Enter one set of coordinates and a width to create a circular site":
            if (siteNumber == 1) {
                res.redirect('which-coordinate-system');
            } else {
                res.redirect('which-coordinate-system?site=' + siteNumber);
            }
            break;
        case "Enter multiple sets of coordinates to mark the boundary of the site":
            if (siteNumber == 1) {
                res.redirect('which-coordinate-system');
            } else {
                res.redirect('which-coordinate-system?site=' + siteNumber);
            }
            break;
        default:
            const defaultRedirectUrl = 'how-do-you-want-to-enter-the-coordinates' + (siteNumber > 1 ? '?site=' + siteNumber : '');
            res.redirect(defaultRedirectUrl);
    }
});

// Which coordinate system? - GET route
router.get('/' + version + section + 'manual-entry/which-coordinate-system', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errors'] = [];
    
    // Get site number from query parameter
    const siteNumber = req.query.site || 1;
    req.session.data['current-site'] = siteNumber;
    
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'manual-entry/which-coordinate-system');
});

// Which coordinate system? - POST route
router.post('/' + version + section + 'manual-entry/which-coordinate-system-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const siteNumber = req.query.site || req.session.data['current-site'] || 1;
    const siteDataKey = siteNumber == 1 ? 'manual-coordinate-system-radios' : 'manual-site-' + siteNumber + '-coordinate-system-radios';
    const coordinateMethodKey = siteNumber == 1 ? 'manual-coordinate-entry-method' : 'manual-site-' + siteNumber + '-coordinate-entry-method';
    
    const selection = req.session.data[siteDataKey];
    const coordinateMethod = req.session.data[coordinateMethodKey];
    const clearCoordinates = req.query.clearCoordinates;
    const returnTo = req.query.returnTo;

    if (!selection) {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        const redirectUrl = 'which-coordinate-system' + (siteNumber > 1 ? '?site=' + siteNumber : '') + (returnTo ? (siteNumber > 1 ? '&' : '?') + 'returnTo=' + returnTo : '');
        res.redirect(redirectUrl);
        return;
    }

    // If clearCoordinates is true OR returning from review, clear coordinate data but keep the system selection
    if (clearCoordinates === 'true' || req.session.data['fromReviewSiteDetails'] === 'true') {
        const sitePrefix = siteNumber == 1 ? 'manual-' : 'manual-site-' + siteNumber + '-';
        
        // Clear coordinate data
        req.session.data[sitePrefix + 'latitude'] = '';
        req.session.data[sitePrefix + 'longitude'] = '';
        req.session.data[sitePrefix + 'site-width'] = '';
        
        // Clear multiple coordinates
        for (let i = 1; i <= 5; i++) {
            req.session.data[sitePrefix + `coordinates-point-${i}-latitude`] = '';
            req.session.data[sitePrefix + `coordinates-point-${i}-longitude`] = '';
        }
    }

    // Clear the fromReviewSiteDetails flag if it was set
    if (req.session.data['fromReviewSiteDetails'] === 'true') {
        delete req.session.data['fromReviewSiteDetails'];
    }

    // Route based on coordinate entry method
    if (coordinateMethod === "Enter multiple sets of coordinates to mark the boundary of the site") {
        if (siteNumber == 1) {
            res.redirect('enter-multiple-coordinates');
        } else {
            res.redirect('enter-multiple-coordinates?site=' + siteNumber);
        }
    } else {
        // For circular sites
        if (siteNumber == 1) {
            res.redirect('enter-coordinates');
        } else {
            res.redirect('enter-coordinates?site=' + siteNumber);
        }
    }
});

// Enter multiple coordinates - GET route
router.get('/' + version + section + 'manual-entry/enter-multiple-coordinates', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errors'] = [];
    
    // Get site number from query parameter
    const siteNumber = req.query.site || 1;
    req.session.data['current-site'] = siteNumber;
    
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'manual-entry/enter-multiple-coordinates');
});

// Enter multiple coordinates - POST route
router.post('/' + version + section + 'manual-entry/enter-multiple-coordinates-router', function (req, res) {
    // Reset global error states
    req.session.data['errorthispage'] = "false";
    req.session.data['errors'] = [];

    const siteNumber = req.query.site || req.session.data['current-site'] || 1;
    const sitePrefix = siteNumber == 1 ? 'manual-' : 'manual-site-' + siteNumber + '-';
    const systemKey = siteNumber == 1 ? 'manual-coordinate-system-radios' : 'manual-site-' + siteNumber + '-coordinate-system-radios';
    
    // Get the selected coordinate system
    const system = req.session.data[systemKey];
    const usingOSGB36 = system === "OSGB36 (National Grid)";
    const latLabel = usingOSGB36 ? "Eastings" : "Latitude";
    const longLabel = usingOSGB36 ? "Northings" : "Longitude";
    const returnTo = req.query.returnTo;

    // Loop over points 1-5
    for (let i = 1; i <= 5; i++) {
        const latKey = sitePrefix + `coordinates-point-${i}-latitude`;
        const longKey = sitePrefix + `coordinates-point-${i}-longitude`;
        const latVal = req.session.data[latKey];
        const longVal = req.session.data[longKey];

        const latMissing = !latVal || latVal.trim() === "";
        const longMissing = !longVal || longVal.trim() === "";

        const pointLabel = i === 1 ? "start and end point" : `point ${i}`;

        // Check visibility for Points 4 & 5 based on flags
        const visibilityKey = sitePrefix + `coordinates-visible-point-${i}`;
        const isPointVisible = i <= 3 || req.session.data[visibilityKey] === "true";

        // Skip validation for hidden points with no entered data
        if (!isPointVisible && (latMissing && longMissing)) {
            req.session.data[`error-${latKey}`] = "false";
            req.session.data[`error-${longKey}`] = "false";
            continue;
        }

        // If lat or long is missing, mark as an error
        if (latMissing || longMissing) {
            req.session.data['errorthispage'] = "true";
        }

        // Latitude error handling
        if (latMissing) {
            req.session.data[`error-${latKey}`] = "true";
            req.session.data['errors'].push({
                text: `Enter the ${latLabel.toLowerCase()} of ${pointLabel}`,
                anchor: `${latKey}`
            });
        } else {
            req.session.data[`error-${latKey}`] = "false";
        }

        // Longitude error handling
        if (longMissing) {
            req.session.data[`error-${longKey}`] = "true";
            req.session.data['errors'].push({
                text: `Enter the ${longLabel.toLowerCase()} of ${pointLabel}`,
                anchor: `${longKey}`
            });
        } else {
            req.session.data[`error-${longKey}`] = "false";
        }
    }

    // Copy manual coordinates to the coordinates data structure for display
    for (let i = 1; i <= 5; i++) {
        const manualLat = req.session.data[sitePrefix + `coordinates-point-${i}-latitude`];
        const manualLong = req.session.data[sitePrefix + `coordinates-point-${i}-longitude`];
        
        if (manualLat) {
            req.session.data[sitePrefix + `coordinates-point-${i}-latitude`] = manualLat;
        }
        if (manualLong) {
            req.session.data[sitePrefix + `coordinates-point-${i}-longitude`] = manualLong;
        }
    }

    // Redirect to the current page if there are errors, else continue to the next page
    if (req.session.data['errorthispage'] === "true") {
        const redirectUrl = 'enter-multiple-coordinates' + (siteNumber > 1 ? '?site=' + siteNumber : '') + (returnTo ? (siteNumber > 1 ? '&' : '?') + 'returnTo=' + returnTo : '');
        return res.redirect(redirectUrl);
    }

    // Check if we're coming from review-site-details page
    if (req.session.data['fromReviewSiteDetails'] === 'true') {
        delete req.session.data['fromReviewSiteDetails']; // Clear the flag
        return res.redirect('review-site-details');
    }

    // Redirect to review page
    res.redirect('review-site-details');
});

// Enter coordinates - GET route
router.get('/' + version + section + 'manual-entry/enter-coordinates', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errortypetwo'] = "false";
    req.session.data['errors'] = [];
    
    // Get site number from query parameter
    const siteNumber = req.query.site || 1;
    req.session.data['current-site'] = siteNumber;
    
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'manual-entry/enter-coordinates');
});

// Enter coordinates - POST route
router.post('/' + version + section + 'manual-entry/enter-coordinates-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errortypetwo'] = "false";

    const siteNumber = req.query.site || req.session.data['current-site'] || 1;
    const sitePrefix = siteNumber == 1 ? 'manual-' : 'manual-site-' + siteNumber + '-';
    
    const latitude = req.session.data[sitePrefix + 'latitude'];
    const longitude = req.session.data[sitePrefix + 'longitude'];
    const returnTo = req.query.returnTo;

    if (!latitude || latitude.trim() === "") {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
    }

    if (!longitude || longitude.trim() === "") {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypetwo'] = "true";
    }

    if (req.session.data['errorthispage'] === "true") {
        const redirectUrl = 'enter-coordinates' + (siteNumber > 1 ? '?site=' + siteNumber : '') + (returnTo ? (siteNumber > 1 ? '&' : '?') + 'returnTo=' + returnTo : '');
        res.redirect(redirectUrl);
        return;
    }

    // Check if we're coming from review-site-details page
    if (req.session.data['fromReviewSiteDetails'] === 'true') {
        delete req.session.data['fromReviewSiteDetails']; // Clear the flag
        return res.redirect('review-site-details');
    }

    if (siteNumber == 1) {
        res.redirect('site-width');
    } else {
        res.redirect('site-width?site=' + siteNumber);
    }
});

// Site width - GET route
router.get('/' + version + section + 'manual-entry/site-width', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errors'] = [];
    
    // Get site number from query parameter
    const siteNumber = req.query.site || 1;
    req.session.data['current-site'] = siteNumber;
    
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'manual-entry/site-width');
});

// Site width - POST route
router.post('/' + version + section + 'manual-entry/site-width-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const siteNumber = req.query.site || req.session.data['current-site'] || 1;
    const sitePrefix = siteNumber == 1 ? 'manual-' : 'manual-site-' + siteNumber + '-';
    const width = req.session.data[sitePrefix + 'site-width'];
    const returnTo = req.query.returnTo;

    // Only check if data is entered (for prototype purposes)
    if (!width || width.trim() === "") {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        const redirectUrl = 'site-width' + (siteNumber > 1 ? '?site=' + siteNumber : '') + (returnTo ? (siteNumber > 1 ? '&' : '?') + 'returnTo=' + returnTo : '');
        res.redirect(redirectUrl);
        return;
    }

    // Clear error
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    
    // Check if we're coming from review-site-details page
    if (req.session.data['fromReviewSiteDetails'] === 'true') {
        delete req.session.data['fromReviewSiteDetails']; // Clear the flag
        return res.redirect('review-site-details');
    }

    res.redirect('review-site-details');
});

// Review site details - GET route
router.get('/' + version + section + 'manual-entry/review-site-details', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errors'] = [];
    
    res.render(version + section + 'manual-entry/review-site-details');
});

// Review site details - POST route
router.post('/' + version + section + 'manual-entry/review-site-details-router', function (req, res) {
    // Mark the task as completed
    req.session.data['exempt-information-3-status'] = 'completed';
    
    // Redirect to task list or next step
    res.redirect('../task-list');
});

// Add next site - GET route
router.get('/' + version + section + 'manual-entry/add-next-site-router', function (req, res) {
    // Get current site number - find the highest site number that has data
    let highestSite = 1;
    
    // Check for existing sites by looking for site name data
    for (let i = 1; i <= 10; i++) {
        const siteDataKey = i === 1 ? 'manual-site-name-text-input' : 'manual-site-' + i + '-name-text-input';
        if (req.session.data[siteDataKey]) {
            highestSite = i;
        }
    }
    
    // Next site number is one more than the highest existing site
    const nextSite = highestSite + 1;
    
    // Update the current site number
    req.session.data['manual-current-site'] = nextSite;
    
    // Clear any error states
    req.session.data['errorthispage'] = "false";
    req.session.data['errors'] = [];
    
    // Redirect to site name page for the new site
    res.redirect('site-name?site=' + nextSite);
});

}