// Generated by Copilot
const { log } = require("govuk-prototype-kit/migrator/logger");

// LEGACY IMPORT REMOVED: exemption-manual-entry.js
// The manual entry renumbering function has been replaced by unified model functions

// Function to get activity information based on article number
function getActivityInfoForArticle(article) {
    const activityMappings = {
        '13': {
            typeOfActivity: 'Construction of works',
            purpose: 'Infrastructure development',
            involves: 'Building marine structures',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/13'
        },
        '17': {
            typeOfActivity: 'Removal of a substance or object',
            purpose: 'Scientific research',
            involves: 'Samples for testing and analysis',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/17'
        },
        '17A': {
            typeOfActivity: 'Removal of a substance or object',
            purpose: 'Scientific research',
            involves: 'Samples for testing and analysis',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/17A'
        },
        '17B': {
            typeOfActivity: 'Deposit of a substance or object',
            purpose: 'Scientific research',
            involves: 'Marine monitoring equipment',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/17B'
        },
        '18A': {
            typeOfActivity: 'Construction of works',
            purpose: 'Scientific research',
            involves: 'Temporary research installations',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/18A'
        },
        '20': {
            typeOfActivity: 'Construction of works',
            purpose: 'Emergency works',
            involves: 'Emergency repairs and safety measures',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/20'
        },
        '21': {
            typeOfActivity: 'Dredging',
            purpose: 'Navigation maintenance',
            involves: 'Channel maintenance and deepening',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/21'
        },
        '25': {
            typeOfActivity: 'Deposit of a substance or object',
            purpose: 'Habitat enhancement',
            involves: 'Marine habitat restoration materials',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/25'
        },
        '25A': {
            typeOfActivity: 'Construction of works',
            purpose: 'Marine infrastructure',
            involves: 'Pontoons and marine structures',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/25A'
        },
        '34': {
            typeOfActivity: 'Construction of works',
            purpose: 'Emergency works',
            involves: 'Emergency coastal protection works',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/34'
        },
        '35': {
            typeOfActivity: 'Removal of a substance or object',
            purpose: 'Environmental protection',
            involves: 'Removal of marine debris and pollutants',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/35'
        }
    };
    
    return activityMappings[article] || activityMappings['17A']; // fallback to 17A
}

module.exports = function (router) {
    let version = "versions/multiple-sites-v2/";
    let section = "exemption/";

// Route handler for sign-in page to capture article information
router.get('/' + version + section + 'sign-in', function (req, res) {
    // Store article information in session if provided
    if (req.query.article) {
        req.session.data['exemption-article'] = req.query.article;
    }
    res.render(version + section + 'sign-in');
});

// Functions for clearing location data
function clearMapData(session) {
delete session.data['sites-drawn-coordinates'];
}

function clearCoordinateData(session) {
    // Clear circle data
    delete session.data['exemption-enter-the-coordinates-at-the-centre-point-latitude-text-input'];
    delete session.data['exemption-enter-the-coordinates-at-the-centre-point-longitude-text-input'];
    delete session.data['exemption-width-of-site-number-input'];
    
    // Clear square data
    delete session.data['exemption-what-are-the-coordinates-of-the-square-latitude-text-input'];
    delete session.data['exemption-what-are-the-coordinates-of-the-square-longitude-text-input'];
    delete session.data['exemption-width-of-square-number-input'];

    // Clear multiple coordinates data
    for (let i = 1; i <= 5; i++) {
        delete session.data[`coordinates-point-${i}-latitude`];
        delete session.data[`coordinates-point-${i}-longitude`];
    }
}

// Function to clear all manual entry session data
function clearAllManualEntryData(session) {
    // Clear manual entry specific data
    delete session.data['manual-multiple-sites'];
    delete session.data['manual-current-site'];
    
    // Clear activity dates settings
    delete session.data['manual-same-activity-dates'];
    delete session.data['manual-same-activity-description'];
    
    // Clear shared activity dates
    delete session.data['manual-start-date-date-input-day'];
    delete session.data['manual-start-date-date-input-month'];
    delete session.data['manual-start-date-date-input-year'];
    delete session.data['manual-end-date-date-input-day'];
    delete session.data['manual-end-date-date-input-month'];
    delete session.data['manual-end-date-date-input-year'];
    
    // Clear shared activity description
    delete session.data['manual-activity-details-text-area'];
    
    // Clear coordinate entry method and system
    delete session.data['manual-coordinate-entry-method'];
    delete session.data['manual-coordinate-system-radios'];
    
    // Clear Site 1 data
    delete session.data['manual-site-name-text-input'];
    delete session.data['manual-latitude'];
    delete session.data['manual-longitude'];
    delete session.data['manual-site-width'];
    
    // Clear Site 1 multiple coordinates
    for (let i = 1; i <= 5; i++) {
        delete session.data[`manual-coordinates-point-${i}-latitude`];
        delete session.data[`manual-coordinates-point-${i}-longitude`];
    }
    
    // Clear Site 2+ data (sites 2-20)
    for (let siteNum = 2; siteNum <= 20; siteNum++) {
        // Site names
        delete session.data[`manual-site-${siteNum}-name-text-input`];
        
        // Individual dates if different
        delete session.data[`manual-site-${siteNum}-start-date-date-input-day`];
        delete session.data[`manual-site-${siteNum}-start-date-date-input-month`];
        delete session.data[`manual-site-${siteNum}-start-date-date-input-year`];
        delete session.data[`manual-site-${siteNum}-end-date-date-input-day`];
        delete session.data[`manual-site-${siteNum}-end-date-date-input-month`];
        delete session.data[`manual-site-${siteNum}-end-date-date-input-year`];
        
        // Individual descriptions if different
        delete session.data[`manual-site-${siteNum}-activity-details-text-area`];
        
        // Coordinate methods and systems
        delete session.data[`manual-site-${siteNum}-coordinate-entry-method`];
        delete session.data[`manual-site-${siteNum}-coordinate-system-radios`];
        
        // Circular coordinates
        delete session.data[`manual-site-${siteNum}-latitude`];
        delete session.data[`manual-site-${siteNum}-longitude`];
        delete session.data[`manual-site-${siteNum}-site-width`];
        
        // Multiple coordinates
        for (let i = 1; i <= 5; i++) {
            delete session.data[`manual-site-${siteNum}-coordinates-point-${i}-latitude`];
            delete session.data[`manual-site-${siteNum}-coordinates-point-${i}-longitude`];
        }
    }
}

// Function to clear all file upload session data
function clearAllFileUploadData(session) {
    // Clear file upload specific data
    delete session.data['exemption-which-type-of-file-radios'];
    delete session.data['kml-file-upload'];
    
    // Clear activity dates settings for file upload
    delete session.data['exemption-same-activity-dates-for-sites'];
    delete session.data['previous-activity-dates-selection'];
    
    // Clear shared activity dates for file upload
    delete session.data['exemption-start-date-date-input-day'];
    delete session.data['exemption-start-date-date-input-month'];
    delete session.data['exemption-start-date-date-input-year'];
    delete session.data['exemption-end-date-date-input-day'];
    delete session.data['exemption-end-date-date-input-month'];
    delete session.data['exemption-end-date-date-input-year'];
    
    // Clear shared activity description for file upload
    delete session.data['exemption-activity-details-text-area'];
    delete session.data['exemption-same-activity-description-for-sites'];
    
    // Clear any file upload related flags
    delete session.data['hasUploadedFile'];
    delete session.data['fileUploadCount'];
}

// Function to comprehensively clear data when changing file upload choices from review page
function clearDataForFileUploadChange(session) {
    // Clear all file upload data
    clearAllFileUploadData(session);
    
    // Clear the current batch and all associated sites
    const currentBatchId = session.data['currentBatchId'];
    if (currentBatchId && session.data['siteBatches']) {
        // Remove the current batch from siteBatches array
        session.data['siteBatches'] = session.data['siteBatches'].filter(batch => batch.id !== currentBatchId);
        
        // Reset the global site counter if this was the only batch
        if (session.data['siteBatches'].length === 0) {
            delete session.data['globalSiteCounter'];
        } else {
            // Recalculate global site counter based on remaining sites
            let maxGlobalNumber = 0;
            session.data['siteBatches'].forEach(batch => {
                batch.sites.forEach(site => {
                    if (site.globalNumber > maxGlobalNumber) {
                        maxGlobalNumber = site.globalNumber;
                    }
                });
            });
            session.data['globalSiteCounter'] = maxGlobalNumber;
        }
    }
    
    // Clear current batch ID
    delete session.data['currentBatchId'];
    
    // Reset file upload count so we get consistent site generation
    delete session.data['fileUploadCount'];
    
    // Clear coordinate method selection to force user to choose again
    delete session.data['exemption-how-do-you-want-to-provide-the-coordinates-radios'];
    
    // Clear all site-related session flags
    delete session.data['siteDetailsSaved'];
    delete session.data['fromReviewSiteDetails'];
    
    // Clear any return parameters
    delete session.data['returnTo'];
}

// Function to clear all coordinate method session data for fresh start
function clearAllCoordinateMethodData(session) {
    // Clear manual entry data
    clearAllManualEntryData(session);
    
    // Clear file upload data  
    clearAllFileUploadData(session);
    
    // Clear coordinate method selection
    delete session.data['exemption-how-do-you-want-to-provide-the-coordinates-radios'];
    
    // Clear coordinate data from old flow
    clearCoordinateData(session);
    clearMapData(session);
    
    // Clear any error states
    delete session.data['errorthispage'];
    delete session.data['errortypeone'];
    delete session.data['errortypetwo'];
    delete session.data['startdateerror'];
    delete session.data['enddateerror'];
    delete session.data['errors'];
    
    // Clear navigation flags
    delete session.data['fromReviewSiteDetails'];
    delete session.data['siteDetailsSaved'];
    delete session.data['current-site'];
    delete session.data['returnTo'];
}

// Add these new clearing functions
function clearAllLocationData(session) {
    // Clear coordinate data
    clearCoordinateData(session);
    
    // Clear coordinate system
    clearCoordinateSystem(session);
    
    // Clear coordinate type
    clearCoordinateType(session);
    
    // Clear method of providing coordinates
    delete session.data['exemption-how-do-you-want-to-provide-the-coordinates-radios'];
    
    // Clear file upload data
    delete session.data['exemption-which-type-of-file-radios'];
    delete session.data['kml-file-upload'];
    
    // Clear map data
    clearMapData(session);
}

function clearCoordinateSystem(session) {
    delete session.data['exemption-what-coordinate-system-radios'];
    clearCoordinateValues(session);
}

function clearCoordinateType(session) {
    delete session.data['coords-type'];
    delete session.data['exemption-how-do-you-want-to-enter-the-coordinates-radios']; // Clear the selection itself
    delete session.data['previous-coords-entry-method']; // Clear the tracking variable
    clearCoordinateValues(session);
}

function clearCoordinateValues(session) {
    // Clear circle data
    delete session.data['exemption-enter-the-coordinates-at-the-centre-point-latitude-text-input'];
    delete session.data['exemption-enter-the-coordinates-at-the-centre-point-longitude-text-input'];
    delete session.data['exemption-width-of-site-number-input'];
    
    // Clear square data
    delete session.data['exemption-what-are-the-coordinates-of-the-square-latitude-text-input'];
    delete session.data['exemption-what-are-the-coordinates-of-the-square-longitude-text-input'];
    delete session.data['exemption-width-of-square-number-input'];

    // Clear multiple coordinates data
    for (let i = 1; i <= 5; i++) {
        delete session.data[`coordinates-point-${i}-latitude`];
        delete session.data[`coordinates-point-${i}-longitude`];
    }
}

// Function to clear only the current batch when cancelling from review page
function clearCurrentBatchOnly(session) {
    const currentBatchId = session.data['currentBatchId'];
    
    if (currentBatchId && session.data['siteBatches']) {
        // Find and remove the current batch
        const batchIndex = session.data['siteBatches'].findIndex(batch => batch.id === currentBatchId);
        if (batchIndex !== -1) {
            session.data['siteBatches'].splice(batchIndex, 1);
            
            // Rebuild the global sites array from remaining batches
            session.data['sites'] = session.data['siteBatches'].flatMap(batch => batch.sites);
        }
    }
    
    // Clear current batch related data
    delete session.data['currentBatchId'];
    
    // Clear session data related to the current entry method
    // Note: We need to be careful here since getCurrentBatch won't work after we removed the batch
    // So we'll clear both types of session data to be safe
    clearAllManualEntryData(session);
    clearAllFileUploadData(session);
    clearAllLocationData(session);
    
    // Clear file upload activity settings
    delete session.data['exemption-same-activity-dates-for-sites'];
    delete session.data['previous-activity-dates-selection'];
    delete session.data['exemption-same-activity-description-for-sites'];
    delete session.data['previous-activity-description-selection'];
    delete session.data['exemption-activity-details-text-area'];
    delete session.data['exemption-start-date-date-input-day'];
    delete session.data['exemption-start-date-date-input-month'];
    delete session.data['exemption-start-date-date-input-year'];
    delete session.data['exemption-end-date-date-input-day'];
    delete session.data['exemption-end-date-date-input-month'];
    delete session.data['exemption-end-date-date-input-year'];
    
    // Clear manual entry activity settings
    delete session.data['manual-same-activity-dates'];
    delete session.data['manual-same-activity-description'];
    delete session.data['manual-activity-details-text-area'];
    delete session.data['manual-start-date-date-input-day'];
    delete session.data['manual-start-date-date-input-month'];
    delete session.data['manual-start-date-date-input-year'];
    delete session.data['manual-end-date-date-input-day'];
    delete session.data['manual-end-date-date-input-month'];
    delete session.data['manual-end-date-date-input-year'];
    
    // Clear coordinate method selection for new batch
    delete session.data['exemption-how-do-you-want-to-provide-the-coordinates-radios'];
    
    // Clear navigation and state flags
    delete session.data['fromReviewSiteDetails'];
    delete session.data['current-site'];
    delete session.data['manual-current-site'];
    delete session.data['returnTo'];
    
    // Update status based on remaining batches
    if (!session.data['siteBatches'] || session.data['siteBatches'].length === 0) {
        // No batches remain - reset to not started
        session.data['exempt-information-3-status'] = 'not-started';
        delete session.data['siteDetailsSaved'];
        delete session.data['sites'];
        delete session.data['siteBatches'];
        delete session.data['globalSiteCounter'];
        delete session.data['hasUploadedFile'];
    } else {
        // Other batches still exist - keep status as in-progress or completed
        // Don't change the status as other batches may be saved
    }
}

// Function to clear all site details data when cancelling to task list
function clearAllSiteDetails(session) {
    // Clear batch system data
    delete session.data['siteBatches'];
    delete session.data['sites'];
    delete session.data['currentBatchId'];
    delete session.data['globalSiteCounter'];
    
    // Clear file upload tracking
    delete session.data['hasUploadedFile'];
    
    // Clear site location data
    clearAllLocationData(session);
    
    // Clear file upload specific data
    clearAllFileUploadData(session);
    
    // Clear manual entry specific data
    clearAllManualEntryData(session);
    
    // Clear activity date settings (both file upload and manual entry)
    delete session.data['exemption-same-activity-dates-for-sites'];
    delete session.data['previous-activity-dates-selection'];
    delete session.data['manual-same-activity-dates'];
    
    // Clear shared activity dates (both file upload and manual entry)
    delete session.data['exemption-start-date-date-input-day'];
    delete session.data['exemption-start-date-date-input-month'];
    delete session.data['exemption-start-date-date-input-year'];
    delete session.data['exemption-end-date-date-input-day'];
    delete session.data['exemption-end-date-date-input-month'];
    delete session.data['exemption-end-date-date-input-year'];
    delete session.data['manual-start-date-date-input-day'];
    delete session.data['manual-start-date-date-input-month'];
    delete session.data['manual-start-date-date-input-year'];
    delete session.data['manual-end-date-date-input-day'];
    delete session.data['manual-end-date-date-input-month'];
    delete session.data['manual-end-date-date-input-year'];
    
    // Clear activity description settings (both file upload and manual entry)
    delete session.data['exemption-same-activity-description-for-sites'];
    delete session.data['previous-activity-description-selection'];
    delete session.data['manual-same-activity-description'];
    
    // Clear shared activity description (both file upload and manual entry)
    delete session.data['exemption-activity-details-text-area'];
    delete session.data['manual-activity-details-text-area'];
    
    // Clear coordinate method selection
    delete session.data['exemption-how-do-you-want-to-provide-the-coordinates-radios'];
    
    // Clear any error states
    delete session.data['startdateerror'];
    delete session.data['enddateerror'];
    delete session.data['errorthispage'];
    delete session.data['errortypeone'];
    delete session.data['errortypetwo'];
    delete session.data['errors'];
    
    // Clear navigation flags
    delete session.data['fromReviewSiteDetails'];
    delete session.data['siteDetailsSaved'];
    delete session.data['current-site'];
    delete session.data['manual-current-site'];
    delete session.data['returnTo'];
    delete session.data['site'];
    delete session.data['return'];
    
    // Reset task status
    delete session.data['exempt-information-3-status'];
}

// Function to clear all data after method of providing site location
function clearDataAfterLocationMethod(session) {
    // Clear file type selection
    delete session.data['exemption-which-type-of-file-radios'];
    
    // Clear file upload data
    delete session.data['kml-file-upload'];
    
    // Clear activity date settings
    delete session.data['exemption-same-activity-dates-for-sites'];
    delete session.data['previous-activity-dates-selection'];
    
    // Clear shared activity dates
    delete session.data['exemption-start-date-date-input-day'];
    delete session.data['exemption-start-date-date-input-month'];
    delete session.data['exemption-start-date-date-input-year'];
    delete session.data['exemption-end-date-date-input-day'];
    delete session.data['exemption-end-date-date-input-month'];
    delete session.data['exemption-end-date-date-input-year'];
    
    // Clear activity description settings
    delete session.data['exemption-same-activity-description-for-sites'];
    delete session.data['previous-activity-description-selection'];
    
    // Clear shared activity description
    delete session.data['exemption-activity-details-text-area'];
}

// Function to clear all data after file type selection
function clearDataAfterFileType(session) {
    // Clear file upload data
    delete session.data['kml-file-upload'];
    
    // Clear activity date settings
    delete session.data['exemption-same-activity-dates-for-sites'];
    delete session.data['previous-activity-dates-selection'];
    
    // Clear shared activity dates
    delete session.data['exemption-start-date-date-input-day'];
    delete session.data['exemption-start-date-date-input-month'];
    delete session.data['exemption-start-date-date-input-year'];
    delete session.data['exemption-end-date-date-input-day'];
    delete session.data['exemption-end-date-date-input-month'];
    delete session.data['exemption-end-date-date-input-year'];
    
    // Clear activity description settings
    delete session.data['exemption-same-activity-description-for-sites'];
    delete session.data['previous-activity-description-selection'];
    
    // Clear shared activity description
    delete session.data['exemption-activity-details-text-area'];
}

// Function to clear all data after file upload
function clearDataAfterFileUpload(session) {
    // Clear activity date settings
    delete session.data['exemption-same-activity-dates-for-sites'];
    delete session.data['previous-activity-dates-selection'];
    
    // Clear shared activity dates
    delete session.data['exemption-start-date-date-input-day'];
    delete session.data['exemption-start-date-date-input-month'];
    delete session.data['exemption-start-date-date-input-year'];
    delete session.data['exemption-end-date-date-input-day'];
    delete session.data['exemption-end-date-date-input-month'];
    delete session.data['exemption-end-date-date-input-year'];
    
    // Clear activity description settings
    delete session.data['exemption-same-activity-description-for-sites'];
    delete session.data['previous-activity-description-selection'];
    
    // Clear shared activity description
    delete session.data['exemption-activity-details-text-area'];
}

//////////////////////////////////////////////////////////////////////////////////////////////
// Project name start
// NOT THE ONE IN THE TASK LIST - SEE BELOW FOR THAT ONE
// TEXT ENTRY
//////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'project-name-start-router', function (req, res) {
    // Turn off errors by default
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    // Check if the text input (Project name) is blank
    const projectTitle = req.session.data['exemption-project-name-text-input'];
    if (!projectTitle || projectTitle.trim() === "") {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
    }

    // Redirect based on errors
    if (req.session.data['errorthispage'] === "true") {
        res.redirect('project-name-start');
    } else {
        // Set the status to completed
        req.session.data['exempt-information-1-status'] = 'completed';
        
        // Check if we need to return to check answers
        if (req.session.data['camefromcheckanswers'] === 'true') {
            req.session.data['camefromcheckanswers'] = false;
            res.redirect('check-answers#project-name');
        } else {
            res.redirect('task-list');
        }
    }
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Project name
// NOT THE OPENING ONE 
// TEXT ENTRY
//////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'project-name-router', function (req, res) {
    // Turn off errors by default
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    // Check if the text input (Project name) is blank
    const projectTitle = req.session.data['exemption-project-name-text-input'];
    if (!projectTitle || String(projectTitle).trim() === "") {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
    }

    // Redirect based on errors
    if (req.session.data['errorthispage'] === "true") {
        res.redirect('project-name');
    } else {
        // Set the status to completed
        req.session.data['exempt-information-1-status'] = 'completed';
        
        // Check if we need to return to check answers
        if (req.session.data['camefromcheckanswers'] === 'true') {
            req.session.data['camefromcheckanswers'] = false;
            res.redirect('check-answers-multiple-sites');
        } else {
            res.redirect('task-list');
        }
    }
});

router.get('/' + version + section + 'project-name', function (req, res) {
    req.session.data['headerNameExemption'] = 'Apply for a marine licence';
    res.render(version + section + 'project-name');
});

///////////////////////////////////////////////////////////////////////////////////////////////
// Activity dates
// DATE ENTRY -  both start and end
//////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'activity-dates-router', function (req, res) {
    // Reset separate error flags
    req.session.data['startdateerror'] = "false";
    req.session.data['enddateerror'] = "false";

    // Retrieve the start date values
    const startDay   = req.session.data['exemption-start-date-date-input-day'];
    const startMonth = req.session.data['exemption-start-date-date-input-month'];
    const startYear  = req.session.data['exemption-start-date-date-input-year'];

    // Retrieve the end date values
    const endDay   = req.session.data['exemption-end-date-date-input-day'];
    const endMonth = req.session.data['exemption-end-date-date-input-month'];
    const endYear  = req.session.data['exemption-end-date-date-input-year'];

    // Check if the start date is missing any field
    if (!startDay || !startMonth || !startYear) {
        req.session.data['startdateerror'] = "true";
    }

    // Check if the end date is missing any field
    if (!endDay || !endMonth || !endYear) {
        req.session.data['enddateerror'] = "true";
    }

    // If either date is incomplete, redirect back to show the errors
    if (req.session.data['startdateerror'] === "true" || req.session.data['enddateerror'] === "true") {
        return res.redirect('activity-dates');
    }
    
    // Save dates to current batch metadata if we have one
    const currentBatch = getCurrentBatch(req.session);
    if (currentBatch && currentBatch.settings) {
        currentBatch.settings.sharedStartDate = {
            day: startDay,
            month: startMonth,
            year: startYear
        };
        currentBatch.settings.sharedEndDate = {
            day: endDay,
            month: endMonth,
            year: endYear
        };
    }
    
    // Check if we're coming from review-site-details page
    const returnTo = req.session.data['returnTo'];
    if (returnTo === 'review-site-details') {
        delete req.session.data['returnTo']; // Clear the return flag
        
        // Look for anchor in referrer URL
        const referer = req.headers.referer || '';
        const hashPosition = referer.indexOf('#');
        
        if (hashPosition > -1) {
            // Extract the anchor and redirect with it
            const anchor = referer.substring(hashPosition);
            return res.redirect('review-site-details' + anchor);
        }
        
        return res.redirect('review-site-details');
    }

    // Default behavior - go to the activity description question
    res.redirect('same-activity-description');
});

router.get('/' + version + section + 'activity-dates', function (req, res) {
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'activity-dates');
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Activity details
// TEXT ENTRY (TEXTAREA)
/////////////////////////////////////////////////////////////////////////////////////////////

// Fix the route for activity-details GET request
router.get('/' + version + section + 'activity-details', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errors'] = [];

    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }

    res.render(version + section + 'activity-details');
});

// Fix the route handler for activity details POST request
router.post('/' + version + section + 'activity-details-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const activityDetails = req.session.data['exemption-activity-details-text-area'];
    if (!activityDetails || activityDetails.trim() === "") {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        return res.redirect('activity-details');
    }

    // Save description to current batch metadata if we have one
    const currentBatch = getCurrentBatch(req.session);
    if (currentBatch && currentBatch.settings) {
        currentBatch.settings.sharedDescription = activityDetails;
    }

    // Check if we're coming from review-site-details page
    const returnTo = req.session.data['returnTo'];
    if (returnTo === 'review-site-details') {
        delete req.session.data['returnTo']; // Clear the return flag
        
        // Look for anchor in referrer URL
        const referer = req.headers.referer || '';
        const hashPosition = referer.indexOf('#');
        
        if (hashPosition > -1) {
            // Extract the anchor and redirect with it
            const anchor = referer.substring(hashPosition);
            return res.redirect('review-site-details' + anchor);
        }
        
        return res.redirect('review-site-details');
    }

    // Default behavior - go to review-site-details
    res.redirect('review-site-details');
});

// Maintain the existing about-your-activity-router for backward compatibility
router.post('/' + version + section + 'about-your-activity-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const activityDetails = req.session.data['exemption-activity-details-text-area'];
    if (!activityDetails || activityDetails.trim() === "") {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        res.redirect('about-your-activity');
    } else {
        // If the user came from check answers, return there
        if (req.session.data['camefromcheckanswers'] === 'true') {
            req.session.data['camefromcheckanswers'] = false;
            res.redirect('check-answers#about-your-activity');
        } else {
            res.redirect('start-date');
        }
    }
});


//////////////////////////////////////////////////////////////////////////////////////////////
// Public Register
// RADIO BUTTONS WITH CONDITIONAL TEXTAREA
/////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'public-register-router', function (req, res) {
    // Reset error states
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errortypetwo'] = "false";

    // Clear text area if user changes from Yes to No
    if (req.session.data['exemption-public-register-radios'] === 'No') {
        delete req.session.data['exemption-public-register-text-area'];
    }

    // Check if the radio option is selected
    if (
        req.session.data['exemption-public-register-radios'] == undefined ||
        req.session.data['exemption-public-register-radios'].trim() == ""
    ) {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        res.redirect('public-register');
    } 
    // If "Yes" is selected, ensure the textarea is not empty
    else if (
        req.session.data['exemption-public-register-radios'] == "Yes" &&
        (req.session.data['exemption-public-register-text-area'] == undefined ||
         req.session.data['exemption-public-register-text-area'].trim() == "")
    ) {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypetwo'] = "true";
        res.redirect('public-register');
    } else {
       // Set the status to completed
       req.session.data['exempt-information-4-status'] = 'completed';
       
       // Check if we need to return to check answers
       if (req.session.data['camefromcheckanswers'] === 'true') {
            req.session.data['camefromcheckanswers'] = false;
            res.redirect('check-answers-multiple-sites');
        } else {
            res.redirect('task-list');
        }
    }
});

// Map router
router.post('/' + version + section + 'map-router', function (req, res) {
    // Set siteTitle
    req.session.data['siteTitle'] = 'review';
    res.redirect('review-location');
});


//////////////////////////////////////////////////////////////////////////////////////////////
// Check answers
/////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'check-answers-router', function (req, res) {
    req.session.data['applicationSubmitted'] = 'true';
    // Redirect to review location page
    res.redirect('confirmation');
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Check answers multiple sites
/////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'check-answers-router', function (req, res) {
    req.session.data['applicationSubmitted'] = 'true';
    // Redirect to confirmation page
    res.redirect('confirmation');
});


// Add route handler for check-answers-multiple-sites page
router.get('/' + version + section + 'check-answers-multiple-sites', function (req, res) {
    // Ensure the site details are marked as saved when reaching check answers
    req.session.data['siteDetailsSaved'] = true;
    
    // Render the page
    res.render(version + section + 'check-answers-multiple-sites');
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Delete project router
/////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'delete-router', function (req, res) {
    // Get the project to delete from the query parameter
    const projectToDelete = req.query.project;
    
    if (projectToDelete === 'user') {
        // Delete the user's project
        req.session.data['userProjectDeleted'] = 'true';
    } else if (projectToDelete === 'tower-bridge') {
        // Delete the Tower Bridge project
        req.session.data['towerBridgeProjectDeleted'] = 'true';
    } else {
        // Fallback to old behavior for backward compatibility
        req.session.data['deleteProject'] = 'true';
    }
    
    // Redirect to Your projects page
    res.redirect('home');
});

// Home page initialization - ensure project deletion flags are properly set
router.get('/' + version + section + 'home', function (req, res) {
    // Initialize flags if they don't exist already
    if (req.session.data['userProjectDeleted'] === undefined) {
        req.session.data['userProjectDeleted'] = 'false';
    }
    
    if (req.session.data['towerBridgeProjectDeleted'] === undefined) {
        req.session.data['towerBridgeProjectDeleted'] = 'false';
    }
    
    if (req.session.data['deleteProject'] === undefined) {
        req.session.data['deleteProject'] = 'false';
    }
    
    // Render the home page
    res.render(version + section + 'home');
});

// Manual site name router
router.post('/' + version + section + 'manual-site-name-router', function (req, res) {
    // Reset error flags
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    
    // Get the site number
    const siteNum = req.session.data['site'];
    
    // Validate input
    if (!req.session.data['manual-site-name-input'] || req.session.data['manual-site-name-input'].trim() === '') {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        res.redirect('manual-site-name');
    } else {
        // Save the site name to the site-specific variable
        req.session.data['site-' + siteNum + '-name'] = req.session.data['manual-site-name-input'];
        
        // Clear the temporary input field
        req.session.data['manual-site-name-input'] = '';
        
        // Redirect back to the review site details page
        const returnSection = req.session.data['return'] || '';
        res.redirect('review-site-details#site-' + siteNum + '-details');
    }
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Delete site confirmation
// CONFIRMATION PAGE
/////////////////////////////////////////////////////////////////////////////////////////////

router.get('/' + version + section + 'delete-site', function (req, res) {
    // Make site parameter available to the template
    const siteIndex = parseInt(req.query.site) || 1;
    const returnTo = req.query.return || 'review-site-details';
    
    // Store these values in the session for use in the POST handler
    req.session.data['site'] = siteIndex;
    req.session.data['returnTo'] = returnTo;
    
    // Render the delete site confirmation page
    res.render(version + section + 'delete-site');
});

router.post('/' + version + section + 'delete-site-router', function (req, res) {
    // Get the global site number from the session (1-based)
    const globalSiteNumber = parseInt(req.session.data['site']) || 1;
    
    // Get the return page from the session
    const returnTo = req.session.data['returnTo'] || 'review-site-details';
    
    // Find the site by global number
    const siteToDelete = findSiteByGlobalNumber(req.session, globalSiteNumber);
    let batchWillBeEmpty = false;
    
    if (siteToDelete) {
        // Remove from the batch
        if (req.session.data['siteBatches'] && siteToDelete.batchId) {
            const batch = req.session.data['siteBatches'].find(b => b.id === siteToDelete.batchId);
            if (batch) {
                const batchSiteIndex = batch.sites.findIndex(s => s.globalNumber === globalSiteNumber);
                if (batchSiteIndex !== -1) {
                    // Check if this is the last site in the batch before removing it
                    batchWillBeEmpty = (batch.sites.length === 1);
                    batch.sites.splice(batchSiteIndex, 1);
                }
            }
        }
        
        // NEW: Renumber all remaining sites
        renumberSitesAfterDeletion(req.session, globalSiteNumber);
    }
    
    // Redirect logic: if this was the last site in the batch and we're coming from review-site-details,
    // redirect to site-details-added instead of review-site-details
    if ((returnTo === 'review-site-details' || returnTo === 'manual-entry-review') && batchWillBeEmpty) {
        res.redirect('site-details-added');
    } else if (returnTo === 'manual-entry-review') {
        res.redirect('manual-entry/review-site-details#site-' + globalSiteNumber + '-details');
    } else if (returnTo === 'review-site-details') {
        res.redirect('review-site-details#site-' + globalSiteNumber + '-details');
    } else if (returnTo === 'site-details-added') {
        res.redirect('site-details-added');
    } else if (returnTo === 'check-answers-multiple-sites') {
        res.redirect('check-answers-multiple-sites');
    } else {
        // Default fallback
        res.redirect('review-site-details');
    }
});

// When returning to site-details from task list, initialize the flow
router.get('/' + version + section + 'site-details', function (req, res) {
    // Set the flag to false when starting the site details journey
    req.session.data['siteDetailsSaved'] = false;
    
    // Render the page
    res.render(version + section + 'site-details');
});

// Route handler for review-site-details
router.get('/' + version + section + 'review-site-details', function (req, res) {
    // If we have the camefromcheckanswers query parameter, set the flag
    if (req.query.camefromcheckanswers === 'true') {
        req.session.data['camefromcheckanswers'] = 'true';
    }
    // If we have a site query parameter, set the active site
    if (req.query.site) {
        req.session.data['site'] = req.query.site;
    }
    // If we have a batchId query parameter, set it as current batch
    if (req.query.batchId) {
        req.session.data['currentBatchId'] = req.query.batchId;
    }
    
    // If we're reviewing a specific batch, populate session data from batch settings
    if (req.query.batchId) {
        const currentBatch = getCurrentBatch(req.session);
        if (currentBatch && currentBatch.settings) {
            // Populate activity settings from batch
            req.session.data['exemption-same-activity-dates-for-sites'] = currentBatch.settings.sameActivityDates;
            req.session.data['exemption-same-activity-description-for-sites'] = currentBatch.settings.sameActivityDescription;
            
            // Populate file type from batch (for file upload batches)
            if (currentBatch.settings.fileType) {
                req.session.data['exemption-which-type-of-file-radios'] = currentBatch.settings.fileType;
            }
            
            // Populate shared dates from batch
            if (currentBatch.settings.sharedStartDate) {
                req.session.data['exemption-start-date-date-input-day'] = currentBatch.settings.sharedStartDate.day;
                req.session.data['exemption-start-date-date-input-month'] = currentBatch.settings.sharedStartDate.month;
                req.session.data['exemption-start-date-date-input-year'] = currentBatch.settings.sharedStartDate.year;
            }
            
            if (currentBatch.settings.sharedEndDate) {
                req.session.data['exemption-end-date-date-input-day'] = currentBatch.settings.sharedEndDate.day;
                req.session.data['exemption-end-date-date-input-month'] = currentBatch.settings.sharedEndDate.month;
                req.session.data['exemption-end-date-date-input-year'] = currentBatch.settings.sharedEndDate.year;
            }
            
            // Populate shared description from batch
            if (currentBatch.settings.sharedDescription) {
                req.session.data['exemption-activity-details-text-area'] = currentBatch.settings.sharedDescription;
            }
            
            // Populate site-specific data from batch sites
            if (currentBatch.sites) {
                currentBatch.sites.forEach((site, index) => {
                    const siteNum = index + 1;
                    
                    // Populate site name using the site-name-text-input pattern for file uploads
                    req.session.data[`site-${siteNum}-name`] = site.name;
                    
                    // Populate site-specific dates if they're different for each site
                    if (currentBatch.settings.sameActivityDates === 'No') {
                        if (site.startDate) {
                            req.session.data[`site-${siteNum}-start-date-day`] = site.startDate.day;
                            req.session.data[`site-${siteNum}-start-date-month`] = site.startDate.month;
                            req.session.data[`site-${siteNum}-start-date-year`] = site.startDate.year;
                        }
                        if (site.endDate) {
                            req.session.data[`site-${siteNum}-end-date-day`] = site.endDate.day;
                            req.session.data[`site-${siteNum}-end-date-month`] = site.endDate.month;
                            req.session.data[`site-${siteNum}-end-date-year`] = site.endDate.year;
                        }
                    }
                    
                    // Populate site-specific descriptions if they're different for each site
                    if (currentBatch.settings.sameActivityDescription === 'No') {
                        req.session.data[`site-${siteNum}-activity-description`] = site.description;
                    }
                });
            }
        }
    }
    
    // Set a flag to indicate we're coming from review-site-details
    req.session.data['fromReviewSiteDetails'] = 'true';
    // Only pass the current batch's sites to the template
    let sites = [];
    if (typeof getCurrentBatch === 'function') {
        const batch = getCurrentBatch(req.session);
        if (batch) {
            sites = batch.sites;
        }
    }
    
    // Use the regular review page for all site counts (single or multiple)
    res.render(version + section + 'review-site-details', { sites });
});

//////////////////////////////////////////////////////////////////////////////////////////////
// How do you want to provide the coordinates?
// PAGE OF RADIO BUTTONS
/////////////////////////////////////////////////////////////////////////////////////////////

// GET route handler for the "How do you want to provide coordinates" page
router.get('/' + version + section + 'how-do-you-want-to-provide-the-coordinates', function (req, res) {
    // Clear error states when loading the page
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errors'] = [];
    
    // Check if we need to clear data (coming from review page change links)
    if (req.query.clearData === 'true') {
        clearDataForFileUploadChange(req.session);
    }
    
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    } else if (!req.query.returnTo && !req.query.camefromcheckanswers && req.query.clearData !== 'true') {
        // Only clear data if starting a truly new journey (not from check answers, review, or clearData scenarios)
        req.session.data['siteDetailsSaved'] = false;
        
        // Clear all file upload data for a fresh start
        clearAllFileUploadData(req.session);
        
        // Also clear the coordinate method selection so user starts fresh
        delete req.session.data['exemption-how-do-you-want-to-provide-the-coordinates-radios'];
        
        // Clear current batch ID so we can start a fresh batch
        delete req.session.data['currentBatchId'];
    }
    
    res.render(version + section + 'how-do-you-want-to-provide-the-coordinates');
});

router.post('/' + version + section + 'how-do-you-want-to-provide-the-coordinates-router', function (req, res) {
    // Turn errors off by default
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const selection = req.session.data['exemption-how-do-you-want-to-provide-the-coordinates-radios'];

    if (!selection) {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        res.redirect('how-do-you-want-to-provide-the-coordinates');
        return;
    }

    // Clear data based on selection
    switch(selection) {
        case "Enter the coordinates of the site manually":
            // Clear file upload data if it exists
            delete req.session.data['exemption-which-type-of-file-radios'];
            delete req.session.data['kml-file-upload'];
            break;
        case "Upload a file with the coordinates of the site":
            // Clear manual entry data if it exists
            clearAllManualEntryData(req.session);
            break;
    }

    // Route based on selection
    switch(selection) {
        case "Enter the coordinates of the site manually":
            res.redirect('manual-entry/does-your-project-involve-more-than-one-site');
            break;
        case "Upload a file with the coordinates of the site":
            res.redirect('which-type-of-file');
            break;
        default:
            res.redirect('how-do-you-want-to-provide-the-coordinates');
    }
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Which type of file do you want to upload?
// PAGE OF RADIO BUTTONS
/////////////////////////////////////////////////////////////////////////////////////////////

// GET route handler for the "Which type of file" page
router.get('/' + version + section + 'which-type-of-file', function (req, res) {
    // Clear error states when loading the page
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errors'] = [];
    
    // Check if we need to clear data (coming from review page change links)
    if (req.query.clearData === 'true') {
        clearDataForFileTypeChange(req.session);
    }
    
    // Check if we're returning from review-site-details
    if (req.session.data['fromReviewSiteDetails'] === 'true') {
        // Keep the flag
    } else if (req.session.data['returnTo'] === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'which-type-of-file');
});

router.post('/' + version + section + 'which-type-of-file-router', function (req, res) {
    // Turn errors off by default
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const selection = req.session.data['exemption-which-type-of-file-radios'];

    if (!selection) {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        res.redirect('which-type-of-file');
        return;
    }

    // Route based on selection
    switch(selection) {
        case "KML":
            res.redirect('upload-file');
            break;
        case "Shapefile":
            res.redirect('upload-file');
            break;
        default:
            res.redirect('which-type-of-file');
    }
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Upload KML File
// FILE UPLOAD PAGE
/////////////////////////////////////////////////////////////////////////////////////////////

// GET route handler for the "Upload file" page
router.get('/' + version + section + 'upload-file', function (req, res) {
    // Clear error states when loading the page
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errors'] = [];
    
    // Check if we need to clear data (coming from review page change links)
    if (req.query.clearData === 'true') {
        clearDataForFileUploadOnly(req.session);
    }
    
    // Check if we're returning from review-site-details
    if (req.session.data['fromReviewSiteDetails'] === 'true') {
        // Keep the flag
    } else if (req.session.data['returnTo'] === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'upload-file');
});

// Batch handling functions
function initializeBatch(session, entryMethod) {
    const batchId = Date.now().toString(); // Unique batch ID
    const batch = {
        id: batchId,
        entryMethod: entryMethod,
        createdAt: new Date().toISOString(),
        sites: [],
        startingGlobalNumber: (session.data['globalSiteCounter'] || 0) + 1  // Store the first site number this batch will use
    };
    
    // Initialize batches array if it doesn't exist
    if (!session.data['siteBatches']) {
        session.data['siteBatches'] = [];
    }
    
    // Add the new batch
    session.data['siteBatches'].push(batch);
    
    // Set current batch ID
    session.data['currentBatchId'] = batchId;
    
    return batchId;
}

function getCurrentBatch(session) {
    const batchId = session.data['currentBatchId'];
    if (!batchId || !session.data['siteBatches']) {
        return null;
    }
    
    return session.data['siteBatches'].find(batch => batch.id === batchId);
}

function addSiteToBatch(session, siteData) {
    const batch = getCurrentBatch(session);
    if (!batch) {
        return false;
    }
    
    // Initialize global site counter if it doesn't exist
    if (!session.data['globalSiteCounter']) {
        session.data['globalSiteCounter'] = 0;
    }
    
    // Assign global site number
    session.data['globalSiteCounter']++;
    siteData.globalNumber = session.data['globalSiteCounter'];
    
    // Add batch metadata to site
    siteData.batchId = batch.id;
    siteData.entryMethod = batch.entryMethod;
    siteData.addedAt = new Date().toISOString();
    
    // Add to batch's sites array
    batch.sites.push(siteData);
    
    // Rebuild global sites array from all batches to prevent duplicates
    if (!session.data['siteBatches']) {
        session.data['sites'] = [];
    } else {
        session.data['sites'] = session.data['siteBatches'].flatMap(batch => batch.sites);
    }
    
    return true;
}

function getSitesByBatch(session, batchId) {
    if (!session.data['siteBatches']) {
        return [];
    }
    
    const batch = session.data['siteBatches'].find(b => b.id === batchId);
    return batch ? batch.sites : [];
}

function getAllSites(session) {
    if (!session.data['siteBatches']) {
        return [];
    }
    
    // Flatten all sites from all batches
    return session.data['siteBatches'].flatMap(batch => batch.sites);
}

// Helper function to find a site by global number
function findSiteByGlobalNumber(session, globalNumber) {
    const allSites = getAllSites(session);
    return allSites.find(site => site.globalNumber === parseInt(globalNumber));
}

// Helper function to get the batch-relative position of a site by global number
function getBatchRelativePosition(session, globalNumber) {
    const currentBatch = getCurrentBatch(session);
    if (!currentBatch || !currentBatch.sites) {
        return 1;
    }
    
    const siteIndex = currentBatch.sites.findIndex(site => site.globalNumber === parseInt(globalNumber));
    return siteIndex !== -1 ? siteIndex + 1 : 1;
}

// Function to renumber all sites after deletion
function renumberSitesAfterDeletion(session, deletedGlobalNumber) {
    console.log('=== RENUMBERING SITES AFTER DELETION ===');
    console.log('Deleted site number:', deletedGlobalNumber);
    
    // 1. Renumber sites in all batches
    if (session.data['siteBatches']) {
        session.data['siteBatches'].forEach(batch => {
            console.log('Processing batch:', batch.id);
            batch.sites.forEach(site => {
                if (site.globalNumber > deletedGlobalNumber) {
                    const oldNumber = site.globalNumber;
                    site.globalNumber--;
                    console.log(`Renumbered site from ${oldNumber} to ${site.globalNumber}`);
                }
            });
        });
    }
    
    // 2. Rebuild global sites array
    session.data['sites'] = session.data['siteBatches'].flatMap(batch => batch.sites);
    
    // 3. Update global site counter
    if (session.data['globalSiteCounter']) {
        session.data['globalSiteCounter']--;
        console.log('Updated globalSiteCounter to:', session.data['globalSiteCounter']);
    }
    
    // 4. Renumber unified sites (replaces legacy session data renumbering)
    renumberUnifiedSitesAfterDeletion(session, deletedGlobalNumber);
    
    console.log('=== RENUMBERING COMPLETE ===');
}

// Unified model functions removed - using batch system exclusively

// Update the upload file router to use batch handling
router.post('/' + version + section + 'upload-file-router', function (req, res) {
    req.session.data['siteTitle'] = 'review';
    // Initialize a new batch for file upload
    const batchId = initializeBatch(req.session, 'file-upload');
    req.session.data['currentBatchId'] = batchId;
    
    // Get current batch and store settings
    const currentBatch = getCurrentBatch(req.session);
    if (currentBatch) {
        // Store batch-level settings for file upload (will be populated later)
        currentBatch.settings = {
            sameActivityDates: null, // Will be set in same-activity-dates
            sameActivityDescription: null, // Will be set in same-activity-description
            sharedStartDate: {},
            sharedEndDate: {},
            sharedDescription: null,
            fileType: req.session.data['exemption-which-type-of-file-radios'] // Store file type
        };
    }
    
    // Track upload count to generate different number of sites
    const uploadCount = (req.session.data['fileUploadCount'] || 0) + 1;
    req.session.data['fileUploadCount'] = uploadCount;
    
    // Mark that a file has been uploaded
    req.session.data['hasUploadedFile'] = true;
    
    let sites;
    
    if (uploadCount === 1) {
        // First upload: use 4-site array
        sites = [
            {
                name: 'Sediment sample 1',
                description: '',
                startDate: {
                    day: '',
                    month: '',
                    year: ''
                },
                endDate: {
                    day: '',
                    month: '',
                    year: ''
                },
                mapImage: '/public/images/worthing-map-drawn-copy.jpg'
            },
            {
                name: 'Sediment sample 2',
                description: '',
                startDate: {
                    day: '',
                    month: '',
                    year: ''
                },
                endDate: {
                    day: '',
                    month: '',
                    year: ''
                },
                mapImage: '/public/images/worthing-map-square-copy.jpg'
            },
            {
                name: 'Sediment sample 3',
                description: '',
                startDate: {
                    day: '',
                    month: '',
                    year: ''
                },
                endDate: {
                    day: '',
                    month: '',
                    year: ''
                },
                mapImage: '/public/images/worthing-map-4-points-copy.jpg'
            },
            {
                name: 'Sediment sample 4',
                description: '',
                startDate: {
                    day: '',
                    month: '',
                    year: ''
                },
                endDate: {
                    day: '',
                    month: '',
                    year: ''
                },
                mapImage: '/public/images/worthing-map-5-points-copy.jpg'
            }
        ];
    } else if (uploadCount === 2) {
        // Second upload: use 1-site array
        sites = [
            {
                name: 'Sediment sample',
                description: '',
                startDate: {
                    day: '',
                    month: '',
                    year: ''
                },
                endDate: {
                    day: '',
                    month: '',
                    year: ''
                },
                mapImage: '/public/images/worthing-map-drawn-copy.jpg'
            }
        ];
    } else {
        // Third and subsequent uploads: use 2-site array
        sites = [
            {
                name: 'Brighton sample',
                description: '',
                startDate: {
                    day: '',
                    month: '',
                    year: ''
                },
                endDate: {
                    day: '',
                    month: '',
                    year: ''
                },
                mapImage: '/public/images/worthing-map-drawn-copy.jpg'
            },
            {
                name: 'Worthing sample',
                description: '',
                startDate: {
                    day: '',
                    month: '',
                    year: ''
                },
                endDate: {
                    day: '',
                    month: '',
                    year: ''
                },
                mapImage: '/public/images/worthing-map-square-copy.jpg'
            }
        ];
    }
    
    // Add each site to the batch
    sites.forEach(site => addSiteToBatch(req.session, site));
    
    // After uploading file, route based on number of sites
    if (sites.length === 1) {
        // Single site: skip "same for all sites" questions and go directly to site-specific details
        // Use the actual global number of the site, not hardcoded 1
        const currentBatch = getCurrentBatch(req.session);
        const siteGlobalNumber = currentBatch && currentBatch.sites[0] ? currentBatch.sites[0].globalNumber : 1;
        res.redirect('site-activity-dates?site=' + siteGlobalNumber);
    } else {
        // Multiple sites: go to same-activity-dates question
        res.redirect('same-activity-dates');
    }
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Are the activity dates the same for every site?
// RADIO BUTTONS
/////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'same-activity-dates-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const selection = req.session.data['exemption-same-activity-dates-for-sites'];
    const previousSelection = req.session.data['previous-activity-dates-selection'];

    if (!selection) {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        res.redirect('same-activity-dates');
        return;
    }

    // Store the current selection for future comparison
    req.session.data['previous-activity-dates-selection'] = selection;
    
    // Save setting to current batch metadata if we have one
    const currentBatch = getCurrentBatch(req.session);
    if (currentBatch && currentBatch.settings) {
        currentBatch.settings.sameActivityDates = selection;
    }

    // Check if we're coming from review-site-details page
    const returnTo = req.session.data['returnTo'];
    
    // Route based on selection
    switch(selection) {
        case "Yes":
            // If dates are the same for all sites, take them to the activity-dates page
            // Pass the returnTo parameter so activity-dates knows where to return
            if (returnTo === 'review-site-details') {
                req.session.data['returnTo'] = 'review-site-details';
                res.redirect('activity-dates');
            } else {
                res.redirect('activity-dates');
            }
            break;
        case "No":
            // If coming from review page and changing from Yes to No
            if (returnTo === 'review-site-details' && previousSelection === "Yes") {
                // Copy shared activity dates to each site before clearing shared data
                if (currentBatch && currentBatch.settings && currentBatch.sites) {
                    const sharedStartDate = currentBatch.settings.sharedStartDate;
                    const sharedEndDate = currentBatch.settings.sharedEndDate;
                    
                    // Copy shared dates to each site in the batch
                    currentBatch.sites.forEach(site => {
                        if (sharedStartDate && sharedStartDate.day) {
                            site.startDate = { ...sharedStartDate };
                        }
                        if (sharedEndDate && sharedEndDate.day) {
                            site.endDate = { ...sharedEndDate };
                        }
                    });
                    
                    // Update global sites array to reflect changes
                    req.session.data['sites'] = req.session.data['siteBatches'].flatMap(batch => batch.sites);
                    
                    // Clear from batch settings after copying
                    currentBatch.settings.sharedStartDate = {};
                    currentBatch.settings.sharedEndDate = {};
                }
                
                // Clear shared activity dates from session
                delete req.session.data['exemption-start-date-date-input-day'];
                delete req.session.data['exemption-start-date-date-input-month'];
                delete req.session.data['exemption-start-date-date-input-year'];
                delete req.session.data['exemption-end-date-date-input-day'];
                delete req.session.data['exemption-end-date-date-input-month'];
                delete req.session.data['exemption-end-date-date-input-year'];
                
                // Return to review page
                delete req.session.data['returnTo'];
                res.redirect('review-site-details');
            } else {
                // If dates are different for each site, skip to activity description question
                // We'll collect site-specific dates later
                res.redirect('same-activity-description');
            }
            break;
        default:
            res.redirect('same-activity-dates');
    }
});

router.get('/' + version + section + 'same-activity-dates', function (req, res) {
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'same-activity-dates');
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Is the activity description the same for every site?
// RADIO BUTTONS
/////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'same-activity-description-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const selection = req.session.data['exemption-same-activity-description-for-sites'];
    const previousSelection = req.session.data['previous-activity-description-selection'];

    if (!selection) {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        res.redirect('same-activity-description');
        return;
    }

    // Store the current selection for future comparison
    req.session.data['previous-activity-description-selection'] = selection;
    
    // Save setting to current batch metadata if we have one
    const currentBatch = getCurrentBatch(req.session);
    if (currentBatch && currentBatch.settings) {
        currentBatch.settings.sameActivityDescription = selection;
    }

    // Check if we're coming from review-site-details page
    const returnTo = req.session.data['returnTo'];
    
    // Route based on selection
    switch(selection) {
        case "Yes":
            // If description is the same for all sites, take them to the activity-details page
            if (returnTo === 'review-site-details') {
                req.session.data['returnTo'] = 'review-site-details';
                res.redirect('activity-details');
            } else {
                res.redirect('activity-details');
            }
            break;
        case "No":
            // If coming from review page and changing from Yes to No
            if (returnTo === 'review-site-details' && previousSelection === "Yes") {
                // Copy shared activity description to each site before clearing shared data
                if (currentBatch && currentBatch.settings && currentBatch.sites) {
                    const sharedDescription = currentBatch.settings.sharedDescription;
                    
                    // Copy shared description to each site in the batch
                    if (sharedDescription) {
                        currentBatch.sites.forEach(site => {
                            site.description = sharedDescription;
                        });
                        
                        // Update global sites array to reflect changes
                        req.session.data['sites'] = req.session.data['siteBatches'].flatMap(batch => batch.sites);
                    }
                    
                    // Clear from batch settings after copying
                    currentBatch.settings.sharedDescription = null;
                }
                
                // Clear shared activity description from session
                delete req.session.data['exemption-activity-details-text-area'];
                
                // Return to review page
                delete req.session.data['returnTo'];
                res.redirect('review-site-details');
            } else {
                // If description is different for each site, skip to review-site-details
                // We'll collect site-specific descriptions later
                res.redirect('review-site-details');
            }
            break;
        default:
            res.redirect('same-activity-description');
    }
});

router.get('/' + version + section + 'same-activity-description', function (req, res) {
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'same-activity-description');
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Site-specific name
// TEXT ENTRY
/////////////////////////////////////////////////////////////////////////////////////////////

// GET handler for site-name
router.get('/' + version + section + 'site-name', function (req, res) {
    // Check if we're returning from review-site-details
    if (req.query.return && req.query.return.includes('site-')) {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    // Store the return parameter for redirecting back later
    if (req.query.return) {
        req.session.data['return'] = req.query.return;
    }
    
    // If we have a site query parameter, set the active site
    if (req.query.site) {
        req.session.data['site'] = req.query.site;
    }
    
    res.render(version + section + 'site-name');
});

router.post('/' + version + section + 'site-name-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const siteName = req.session.data['site-name-text-input'];
    const globalSiteNumber = parseInt(req.session.data['site']) || 1;
    const returnSection = req.session.data['return'];

    if (!siteName || siteName.trim() === "") {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        return res.redirect('site-name');
    }

    // If we have a return section and existing sites, we're updating an existing site
    if (returnSection && req.session.data['sites'] && req.session.data['sites'].length >= 1) {
        // Find the site by global number and update it
        const siteToUpdate = findSiteByGlobalNumber(req.session, globalSiteNumber);
        
        if (siteToUpdate) {
            siteToUpdate.name = siteName;
            
            // Update the site in its batch as well
            if (siteToUpdate.batchId) {
                const batch = req.session.data['siteBatches']?.find(b => b.id === siteToUpdate.batchId);
                if (batch) {
                    const batchSite = batch.sites.find(s => s.globalNumber === globalSiteNumber);
                    if (batchSite) {
                        batchSite.name = siteName;
                    }
                }
            }
            
            // Rebuild global sites array
            req.session.data['sites'] = req.session.data['siteBatches'].flatMap(batch => batch.sites);
        }
        
        // Clear the input field
        req.session.data['site-name-text-input'] = '';
        

        
        // Redirect back to review-site-details with the anchor
        return res.redirect('review-site-details#' + returnSection);
    }

    // If we're not updating an existing site, create a new one (manual entry flow)
    // Get current batch
    const batch = getCurrentBatch(req.session);
    if (!batch) {
        // Initialize a new batch for manual entry if none exists
        initializeBatch(req.session, 'manual-entry');
    }

    // Create new site data
    const siteData = {
        name: siteName,
        startDate: {},
        endDate: {},
        description: ''
    };

    // Add site to current batch
    addSiteToBatch(req.session, siteData);
    
    // If we need site-specific dates and we're not returning to somewhere else
    if (req.session.data['exemption-same-activity-dates-for-sites'] === "No" && !returnSection) {
        // Go to site-specific dates page
        return res.redirect('site-activity-dates?site=' + siteData.globalNumber);
    } 
    // If we need site-specific descriptions and we're not returning to somewhere else
    else if (req.session.data['exemption-same-activity-description-for-sites'] === "No" && !returnSection) {
        // Go to site-specific description page
        return res.redirect('site-activity-description?site=' + siteData.globalNumber);
    }
    else if (returnSection) {
        // Redirect back to review-site-details with the anchor
        return res.redirect('review-site-details#' + returnSection);
    }
    else {
        // Default: return to site-details-added list
        return res.redirect('site-details-added');
    }
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Site-specific activity dates
// DATE ENTRY - both start and end
//////////////////////////////////////////////////////////////////////////////////////////////

// GET handler for site-activity-dates
router.get('/' + version + section + 'site-activity-dates', function (req, res) {
    // Check if we're returning from review-site-details
    if (req.query.return && req.query.return.includes('site-')) {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    // If we have a site query parameter, set the active site
    if (req.query.site) {
        req.session.data['site'] = req.query.site;
    }
    
    res.render(version + section + 'site-activity-dates');
});

// POST handler for site-activity-dates
router.post('/' + version + section + 'site-activity-dates-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errortypetwo'] = "false";
    req.session.data['startdateerror'] = "false";
    req.session.data['enddateerror'] = "false";

    const siteIndex = parseInt(req.session.data['site']) || 1;
    
    // Validate input data - start date
    const sitePrefix = 'site-' + siteIndex + '-';
    const startDay = req.session.data[sitePrefix + 'start-date-day'];
    const startMonth = req.session.data[sitePrefix + 'start-date-month'];
    const startYear = req.session.data[sitePrefix + 'start-date-year'];
    
    // Validate input data - end date
    const endDay = req.session.data[sitePrefix + 'end-date-day'];
    const endMonth = req.session.data[sitePrefix + 'end-date-month'];
    const endYear = req.session.data[sitePrefix + 'end-date-year'];

    // Check if any fields are missing
    if (!startDay || !startMonth || !startYear || !endDay || !endMonth || !endYear) {
        req.session.data['errorthispage'] = "true";
        
        // Set which specific fields have errors
        if (!startDay || !startMonth || !startYear) {
            req.session.data['errortypeone'] = "true";
            req.session.data['startdateerror'] = "true";
        }
        
        if (!endDay || !endMonth || !endYear) {
            req.session.data['errortypetwo'] = "true";
            req.session.data['enddateerror'] = "true";
        }
        
        return res.redirect('site-activity-dates?site=' + siteIndex);
    }

    // Update the site in the sites array
    const sites = req.session.data['sites'] || [];
    if (sites.length >= siteIndex) {
        // Create the date objects if they don't exist
        if (!sites[siteIndex-1].startDate) {
            sites[siteIndex-1].startDate = {};
        }
        
        if (!sites[siteIndex-1].endDate) {
            sites[siteIndex-1].endDate = {};
        }
        
        // Update the dates
        sites[siteIndex-1].startDate = {
            day: startDay,
            month: startMonth,
            year: startYear
        };
        
        sites[siteIndex-1].endDate = {
            day: endDay,
            month: endMonth,
            year: endYear
        };
        
        // Save the updated array back to the session
        req.session.data['sites'] = sites;
        
        // Also update the site in the current batch
        const currentBatch = getCurrentBatch(req.session);
        if (currentBatch && currentBatch.sites) {
            const batchSite = currentBatch.sites.find(site => site.globalNumber === siteIndex);
            if (batchSite) {
                batchSite.startDate = {
                    day: startDay,
                    month: startMonth,
                    year: startYear
                };
                batchSite.endDate = {
                    day: endDay,
                    month: endMonth,
                    year: endYear
                };
            }
        }
    }
    
    // Extract the return parameter which contains the section name
    const returnSection = req.session.data['return'];
    
    if (returnSection) {
        // Redirect back to review-site-details with the anchor
        return res.redirect('review-site-details#' + returnSection);
    }
    
    // Check if this is a single site batch from file upload
    const currentBatch = getCurrentBatch(req.session);
    const isSingleSiteBatch = currentBatch && currentBatch.sites && currentBatch.sites.length === 1;
    
    // For single site batches, check if this site belongs to the current batch
    let isSiteInCurrentBatch = false;
    if (isSingleSiteBatch && currentBatch.sites[0]) {
        isSiteInCurrentBatch = currentBatch.sites[0].globalNumber === siteIndex;
    }
    
    if (isSingleSiteBatch && isSiteInCurrentBatch) {
        // Single site: go to activity description next
        res.redirect('site-activity-description?site=' + siteIndex);
    } else {
        // Multiple sites: return to review-site-details without anchor
        res.redirect('review-site-details');
    }
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Site-specific activity description
// TEXT ENTRY (TEXTAREA)
/////////////////////////////////////////////////////////////////////////////////////////////

// GET handler for site-activity-description
router.get('/' + version + section + 'site-activity-description', function (req, res) {
    // Check if we're returning from review-site-details
    if (req.query.return && req.query.return.includes('site-')) {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    // If we have a site query parameter, set the active site
    if (req.query.site) {
        req.session.data['site'] = req.query.site;
    }
    
    res.render(version + section + 'site-activity-description');
});

// POST handler for site-activity-description
router.post('/' + version + section + 'site-activity-description-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    
    const siteIndex = parseInt(req.session.data['site']) || 1;
    const description = req.session.data['site-' + siteIndex + '-activity-description'];
    
    if (!description || description.trim() === "") {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        return res.redirect('site-activity-description?site=' + siteIndex);
    }
    
    // Update the site in the sites array
    const sites = req.session.data['sites'] || [];
    if (sites.length >= siteIndex) {
        // Update the description - save to description property to match what the review template checks
        sites[siteIndex-1].description = description;
        
        // Save the updated array back to the session
        req.session.data['sites'] = sites;
        
        // Also update the site in the current batch
        const currentBatch = getCurrentBatch(req.session);
        if (currentBatch && currentBatch.sites) {
            const batchSite = currentBatch.sites.find(site => site.globalNumber === siteIndex);
            if (batchSite) {
                batchSite.description = description;
            }
        }
    }
    
    // Extract the return parameter which contains the section name
    const returnSection = req.session.data['return'];
    
    if (returnSection) {
        // Redirect back to review-site-details with the anchor
        return res.redirect('review-site-details#' + returnSection);
    }
    
    // Default: return to review-site-details without anchor
    res.redirect('review-site-details');
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Review Site Details
// REVIEW PAGE
/////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'review-site-details-router', function (req, res) {
    let hasSiteIncomplete = false;
    let sites = [];
    if (typeof getCurrentBatch === 'function') {
        const batch = getCurrentBatch(req.session);
        if (batch) {
            sites = batch.sites;
        }
    }
    if (sites.length > 0) {
        for (const site of sites) {
            if (!site.name) {
                hasSiteIncomplete = true;
            }
            
            if (sites.length === 1) {
                // Single site: always require dates and description
                if (!site.startDate || !site.startDate.day) {
                    hasSiteIncomplete = true;
                }
                if (!site.description) {
                    hasSiteIncomplete = true;
                }
            } else {
                // Multiple sites: check conditionally based on "same for all sites" settings
                if (req.session.data['exemption-same-activity-dates-for-sites'] === "No") {
                    if (!site.startDate || !site.startDate.day) {
                        hasSiteIncomplete = true;
                    }
                }
                if (req.session.data['exemption-same-activity-description-for-sites'] === "No") {
                    if (!site.description) {
                        hasSiteIncomplete = true;
                    }
                }
            }
        }
        if (hasSiteIncomplete) {
            req.session.data['exempt-information-3-status'] = 'in-progress';
        } else {
            req.session.data['exempt-information-3-status'] = 'completed';
        }
    } else {
        req.session.data['exempt-information-3-status'] = 'cannot-start';
    }
    req.session.data['siteDetailsSaved'] = true;
    delete req.session.data['fromReviewSiteDetails'];
    
    // Clear currentBatchId so we can start fresh next time
    delete req.session.data['currentBatchId'];
    
    if (req.session.data['camefromcheckanswers'] === 'true') {
        req.session.data['camefromcheckanswers'] = false;
        res.redirect('check-answers-multiple-sites');
    } else {
        res.redirect('site-details-added');
    }
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Site details added
// PAGE WITH TABLE OF SITES
/////////////////////////////////////////////////////////////////////////////////////////////

// GET route for site-details-added - rebuild sites array from batches
router.get('/' + version + section + 'site-details-added', function (req, res) {
    // Rebuild the sites array from all batches for display on "Your sites" page
    const allSites = getAllSites(req.session);
    
    if (allSites && allSites.length > 0) {
        req.session.data['sites'] = allSites;
    } else {
        req.session.data['sites'] = [];
    }
    
    res.render(version + section + 'site-details-added');
});

router.post('/' + version + section + 'site-details-added-router', function (req, res) {
    // Reset error flag
    req.session.data['errorthispage'] = "false";
    
    // Check if any site is incomplete
    let hasSiteIncomplete = false;
    
    // Get the sites array
    const sites = req.session.data['sites'] || [];
    
    // Check each site for completeness
    if (sites.length > 0) {
        for (const site of sites) {
            // Check if site name is missing
            if (!site.name) {
                hasSiteIncomplete = true;
            }
            
            // Check if site-specific dates are required but incomplete
            if (req.session.data['exemption-same-activity-dates-for-sites'] === "No") {
                if (!site.startDate || !site.startDate.day) {
                    hasSiteIncomplete = true;
                }
            }
            
            // Check if site-specific descriptions are required but incomplete
            if (req.session.data['exemption-same-activity-description-for-sites'] === "No") {
                if (!site.description) {
                    hasSiteIncomplete = true;
                }
            }
        }
    }
    
    // Check if "I've finished adding sites" checkbox is checked
    if (req.session.data['finished-adding-sites'] && req.session.data['finished-adding-sites'].includes('yes')) {
        // Check if there are no sites at all
        if (sites.length === 0) {
            // Set error flag if no sites exist and checkbox is checked
            req.session.data['errorthispage'] = "true";
            res.redirect('site-details-added');
            return;
        } else if (hasSiteIncomplete) {
            // Set error flag if sites are incomplete and checkbox is checked
            req.session.data['errorthispage'] = "true";
            res.redirect('site-details-added');
            return;
        } else {
            // Mark the section as completed if all sites are complete
            req.session.data['exempt-information-3-status'] = 'completed';
        }
    } else {
        // Mark the section as in progress
        req.session.data['exempt-information-3-status'] = 'in-progress';
    }
    
    // Redirect to task list if no errors
    res.redirect('task-list');
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Add another site - clear all data and start fresh coordinate method selection
/////////////////////////////////////////////////////////////////////////////////////////////

// Route handler for "Add another site" functionality
router.get('/' + version + section + 'add-another-site', function (req, res) {
    // FIXED: Don't clear all data - preserve existing batches
    // Instead of clearing all coordinate method data, only clear the method selection
    // This prevents file uploads from wiping manual entry activity settings
    
    // Clear error states from the previous page (site-details-added)
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errors'] = [];
    
    // Clear only the coordinate method selection to allow fresh choice
    delete req.session.data['exemption-how-do-you-want-to-provide-the-coordinates-radios'];
    
    // Clear current batch ID so we can start a fresh batch
    delete req.session.data['currentBatchId'];
    
    // Clear any navigation flags that might interfere
    delete req.session.data['fromReviewSiteDetails'];
    delete req.session.data['siteDetailsSaved'];
    delete req.session.data['current-site'];
    delete req.session.data['returnTo'];
    
    // Clear the checkbox state from the sites page
    delete req.session.data['finished-adding-sites'];
    
    // Redirect to coordinate method selection page
    res.redirect('how-do-you-want-to-provide-the-coordinates');
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Cancel actions
/////////////////////////////////////////////////////////////////////////////////////////////

router.get('/' + version + section + 'cancel-site-details', function (req, res) {
    // Check if we're coming from review-site-details page directly
    if (req.session.data['fromReviewSiteDetails'] === 'true') {
        // Return to the review page without clearing data
        delete req.session.data['fromReviewSiteDetails'];
        
        // Determine which review page to return to based on current batch type
        const currentBatch = getCurrentBatch(req.session);
        if (currentBatch && currentBatch.entryMethod === 'manual-entry') {
            res.redirect('manual-entry/review-site-details');
        } else {
            res.redirect('review-site-details');
        }
    }
    // Check if site details have been saved previously
    else if (req.session.data['siteDetailsSaved']) {
        // If we came from check answers page, return there
        if (req.session.data['camefromcheckanswers'] === 'true') {
            req.session.data['camefromcheckanswers'] = false;
            res.redirect('check-answers-multiple-sites');
        } else {
            // Otherwise return to site details added page
            res.redirect('site-details-added');
        }
    } else {
        // If not saved, show warning page before clearing data
        res.redirect('cancel');
    }
});

// Cancel handler for returning to review-site-details without clearing data
// Used when editing details from the review page
router.get('/' + version + section + 'cancel-to-review', function (req, res) {
    // Check if we're coming from review-site-details page directly
    if (req.session.data['fromReviewSiteDetails'] === 'true') {
        // Return to the review page without clearing data
        delete req.session.data['fromReviewSiteDetails'];
        
        // Determine which review page to return to based on current batch type
        const currentBatch = getCurrentBatch(req.session);
        if (currentBatch && currentBatch.entryMethod === 'manual-entry') {
            res.redirect('manual-entry/review-site-details');
        } else {
            res.redirect('review-site-details');
        }
    }
    // Check if site details have been saved previously
    else if (req.session.data['siteDetailsSaved']) {
        // If we came from check answers page, return there
        if (req.session.data['camefromcheckanswers'] === 'true') {
            req.session.data['camefromcheckanswers'] = false;
            res.redirect('check-answers-multiple-sites');
        } else {
            // Return to the appropriate review page without clearing data
            const currentBatch = getCurrentBatch(req.session);
            if (currentBatch && currentBatch.entryMethod === 'manual-entry') {
                res.redirect('manual-entry/review-site-details');
            } else {
                res.redirect('review-site-details');
            }
        }
    } else {
        // If not saved, show warning page before clearing data
        res.redirect('cancel');
    }
});

// Cancel handler specifically from review-site-details page
router.get('/' + version + section + 'cancel-from-review-site-details', function (req, res) {
    // If we came from check answers page, return there
    if (req.session.data['camefromcheckanswers'] === 'true') {
        req.session.data['camefromcheckanswers'] = false;
        res.redirect('check-answers-multiple-sites');
    } else if (req.session.data['siteDetailsSaved']) {
        // If details were previously saved, go to site-details-added
        res.redirect('site-details-added');
    } else {
        // If nothing was saved yet, show warning page before clearing data
        res.redirect('cancel');
    }
});

// GET route for cancel warning page
router.get('/' + version + section + 'cancel', function (req, res) {
    res.render(version + section + 'cancel');
});

// POST route for cancel confirmation
router.post('/' + version + section + 'cancel-confirmed', function (req, res) {
    // Only clear the current batch, not all site details
    clearCurrentBatchOnly(req.session);
    res.redirect('task-list');
});

//////////////////////////////////////////////////////////////////////////////////////////////
// More than one site change functionality (from single-site review page)
/////////////////////////////////////////////////////////////////////////////////////////////

// GET route for changing number of sites from single-site review
router.get('/' + version + section + 'more-than-one-site', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    
    // Pass returnTo parameter to template if provided
    if (req.query.returnTo) {
        req.session.data['returnTo'] = req.query.returnTo;
    }
    
    // If coming from single-site review, pre-select "No" to reflect their previous choice
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['exemption-multiple-sites-radios'] = 'No';
    }
    
    res.render(version + section + 'multiple-sites-question');
});

// POST route for handling number of sites change
router.post('/' + version + section + 'more-than-one-site-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    
    const selection = req.session.data['exemption-multiple-sites-radios'];
    
    // Validate selection
    if (!selection) {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        return res.redirect('more-than-one-site' + (req.query.returnTo ? '?returnTo=' + req.query.returnTo : ''));
    }
    
    // If coming from single-site review and user selects "Yes" (multiple sites)
    if (req.query.returnTo === 'review-site-details' && selection === 'Yes') {
        // CONVERSION: Single site to multiple sites
        // This is the ONLY place where we create batches for single sites
        
        // Create site data object from single-site session data
        // IMPORTANT: Structure data to match what multiple sites review template expects
        const siteData = {
            // Activity dates at site level (not nested in activityDates)
            startDate: {
                day: req.session.data['single-site-start-date-date-input-day'],
                month: req.session.data['single-site-start-date-date-input-month'],
                year: req.session.data['single-site-start-date-date-input-year']
            },
            endDate: {
                day: req.session.data['single-site-end-date-date-input-day'],
                month: req.session.data['single-site-end-date-date-input-month'],
                year: req.session.data['single-site-end-date-date-input-year']
            },
            description: req.session.data['single-site-activity-details-text-area'],
            
            // Coordinate system at site level (not nested in coordinates)
            coordinateSystem: req.session.data['single-site-coordinate-system-radios'],
            
            // Coordinates object with type property (not entryMethod)
            coordinates: {},
            
            name: undefined  // Single sites don't have names - this makes Site 1 incomplete
        };
        
        // Add coordinate data based on entry method - structure for multiple sites template
        if (req.session.data['single-site-coordinate-entry-method'] === "Enter one set of coordinates and a width to create a circular site") {
            siteData.coordinates.type = 'circle';
            siteData.coordinates.center = {  // Note: 'center' not 'centrePoint'
                latitude: req.session.data['single-site-latitude'],
                longitude: req.session.data['single-site-longitude']
            };
            siteData.coordinates.width = req.session.data['single-site-width'];
        } else if (req.session.data['single-site-coordinate-entry-method'] === "Enter multiple sets of coordinates to mark the boundary of the site") {
            siteData.coordinates.type = 'polygon';
            siteData.coordinates.points = [];
            for (let i = 1; i <= 5; i++) {
                const lat = req.session.data[`single-site-coordinates-point-${i}-latitude`];
                const long = req.session.data[`single-site-coordinates-point-${i}-longitude`];
                if (lat && long) {
                    siteData.coordinates.points.push({
                        pointNumber: i,
                        latitude: lat,
                        longitude: long
                    });
                }
            }
        }
        
        // NOW create the batch and add the site (first time using batch system)
        // Use 'manual-entry' so it routes to the correct multiple sites review page
        if (!getCurrentBatch(req.session)) {
            initializeBatch(req.session, 'manual-entry');
        }
        
        addSiteToBatch(req.session, siteData);
        
        // Set batch entryMethod to 'manual-entry' for unified processing
        const createdBatch = getCurrentBatch(req.session);
        if (createdBatch) {
            createdBatch.entryMethod = 'manual-entry';
        }
        
        // Set conversion flag and clear single-site mode
        req.session.data['converted-from-single-site'] = 'true';
        delete req.session.data['single-site-completed'];
        
        // Mark as in-progress (Site 1 needs a name)
        req.session.data['exempt-information-3-status'] = 'in-progress';
        
        // Clear single-site session data since we've moved to batch system
        const keysToDelete = Object.keys(req.session.data).filter(key => key.startsWith('single-site-'));
        keysToDelete.forEach(key => {
            delete req.session.data[key];
        });
        
        // Clear the returnTo parameter
        delete req.session.data['returnTo'];
        
        // Redirect to site-details-added (Your sites page)
        return res.redirect('site-details-added');
    }
    
    // For other cases, follow the normal flow
    if (selection === 'Yes') {
        res.redirect('manual-entry/does-your-project-involve-more-than-one-site');
    } else {
        res.redirect('manual-entry/does-your-project-involve-more-than-one-site');
    }
});

// Function to clear data when changing file type (but keeping coordinate method)
function clearDataForFileTypeChange(session) {
    // Clear file type and upload data only
    delete session.data['exemption-which-type-of-file-radios'];
    delete session.data['hasUploadedFile'];
    delete session.data['fileUploadCount'];
    
    // Clear the current batch and all associated sites
    const currentBatchId = session.data['currentBatchId'];
    if (currentBatchId && session.data['siteBatches']) {
        session.data['siteBatches'] = session.data['siteBatches'].filter(batch => batch.id !== currentBatchId);
        
        if (session.data['siteBatches'].length === 0) {
            delete session.data['globalSiteCounter'];
        } else {
            let maxGlobalNumber = 0;
            session.data['siteBatches'].forEach(batch => {
                batch.sites.forEach(site => {
                    if (site.globalNumber > maxGlobalNumber) {
                        maxGlobalNumber = site.globalNumber;
                    }
                });
            });
            session.data['globalSiteCounter'] = maxGlobalNumber;
        }
    }
    
    delete session.data['currentBatchId'];
    
    // Clear activity dates and descriptions
    delete session.data['exemption-same-activity-dates-for-sites'];
    delete session.data['exemption-same-activity-description-for-sites'];
    delete session.data['exemption-start-date-date-input-day'];
    delete session.data['exemption-start-date-date-input-month'];
    delete session.data['exemption-start-date-date-input-year'];
    delete session.data['exemption-end-date-date-input-day'];
    delete session.data['exemption-end-date-date-input-month'];
    delete session.data['exemption-end-date-date-input-year'];
    delete session.data['exemption-activity-details-text-area'];
}

// Function to clear data when changing uploaded file only (keeping coordinate method and file type)
function clearDataForFileUploadOnly(session) {
    // Only clear upload flag and upload count
    delete session.data['hasUploadedFile'];
    delete session.data['fileUploadCount'];
    
    // Clear the current batch and all associated sites
    const currentBatchId = session.data['currentBatchId'];
    if (currentBatchId && session.data['siteBatches']) {
        session.data['siteBatches'] = session.data['siteBatches'].filter(batch => batch.id !== currentBatchId);
        
        if (session.data['siteBatches'].length === 0) {
            delete session.data['globalSiteCounter'];
        } else {
            let maxGlobalNumber = 0;
            session.data['siteBatches'].forEach(batch => {
                batch.sites.forEach(site => {
                    if (site.globalNumber > maxGlobalNumber) {
                        maxGlobalNumber = site.globalNumber;
                    }
                });
            });
            session.data['globalSiteCounter'] = maxGlobalNumber;
        }
    }
    
    delete session.data['currentBatchId'];
    
    // Clear activity dates and descriptions
    delete session.data['exemption-same-activity-dates-for-sites'];
    delete session.data['exemption-same-activity-description-for-sites'];
    delete session.data['exemption-start-date-date-input-day'];
    delete session.data['exemption-start-date-date-input-month'];
    delete session.data['exemption-start-date-date-input-year'];
    delete session.data['exemption-end-date-date-input-day'];
    delete session.data['exemption-end-date-date-input-month'];
    delete session.data['exemption-end-date-date-input-year'];
    delete session.data['exemption-activity-details-text-area'];
}

// Unified model global exports removed - using batch system exclusively

};