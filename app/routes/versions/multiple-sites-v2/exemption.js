// Generated by Copilot
const { log } = require("govuk-prototype-kit/migrator/logger");

// Function to get activity information based on article number
function getActivityInfoForArticle(article) {
    const activityMappings = {
        '13': {
            typeOfActivity: 'Construction of works',
            purpose: 'Infrastructure development',
            involves: 'Building marine structures',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/13'
        },
        '17': {
            typeOfActivity: 'Removal of a substance or object',
            purpose: 'Scientific research',
            involves: 'Samples for testing and analysis',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/17'
        },
        '17A': {
            typeOfActivity: 'Removal of a substance or object',
            purpose: 'Scientific research',
            involves: 'Samples for testing and analysis',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/17A'
        },
        '17B': {
            typeOfActivity: 'Deposit of a substance or object',
            purpose: 'Scientific research',
            involves: 'Marine monitoring equipment',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/17B'
        },
        '18A': {
            typeOfActivity: 'Construction of works',
            purpose: 'Scientific research',
            involves: 'Temporary research installations',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/18A'
        },
        '20': {
            typeOfActivity: 'Construction of works',
            purpose: 'Emergency works',
            involves: 'Emergency repairs and safety measures',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/20'
        },
        '21': {
            typeOfActivity: 'Dredging',
            purpose: 'Navigation maintenance',
            involves: 'Channel maintenance and deepening',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/21'
        },
        '25': {
            typeOfActivity: 'Deposit of a substance or object',
            purpose: 'Habitat enhancement',
            involves: 'Marine habitat restoration materials',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/25'
        },
        '25A': {
            typeOfActivity: 'Construction of works',
            purpose: 'Marine infrastructure',
            involves: 'Pontoons and marine structures',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/25A'
        },
        '34': {
            typeOfActivity: 'Construction of works',
            purpose: 'Emergency works',
            involves: 'Emergency coastal protection works',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/34'
        },
        '35': {
            typeOfActivity: 'Removal of a substance or object',
            purpose: 'Environmental protection',
            involves: 'Removal of marine debris and pollutants',
            legislationUrl: 'https://www.legislation.gov.uk/uksi/2011/409/article/35'
        }
    };
    
    return activityMappings[article] || activityMappings['17A']; // fallback to 17A
}

module.exports = function (router) {
    let version = "versions/multiple-sites-v2/";
    let section = "exemption/";

// Route handler for sign-in page to capture article information
router.get('/' + version + section + 'sign-in', function (req, res) {
    // Store article information in session if provided
    if (req.query.article) {
        req.session.data['exemption-article'] = req.query.article;
    }
    res.render(version + section + 'sign-in');
});

// Functions for clearing location data
function clearMapData(session) {
delete session.data['sites-drawn-coordinates'];
}

function clearCoordinateData(session) {
    // Clear circle data
    delete session.data['exemption-enter-the-coordinates-at-the-centre-point-latitude-text-input'];
    delete session.data['exemption-enter-the-coordinates-at-the-centre-point-longitude-text-input'];
    delete session.data['exemption-width-of-site-number-input'];
    
    // Clear square data
    delete session.data['exemption-what-are-the-coordinates-of-the-square-latitude-text-input'];
    delete session.data['exemption-what-are-the-coordinates-of-the-square-longitude-text-input'];
    delete session.data['exemption-width-of-square-number-input'];

    // Clear multiple coordinates data
    for (let i = 1; i <= 5; i++) {
        delete session.data[`coordinates-point-${i}-latitude`];
        delete session.data[`coordinates-point-${i}-longitude`];
    }
}

// Function to clear all manual entry session data
function clearAllManualEntryData(session) {
    // Clear manual entry specific data
    delete session.data['manual-multiple-sites'];
    delete session.data['manual-current-site'];
    
    // Clear activity dates settings
    delete session.data['manual-same-activity-dates'];
    delete session.data['manual-same-activity-description'];
    
    // Clear shared activity dates
    delete session.data['manual-start-date-date-input-day'];
    delete session.data['manual-start-date-date-input-month'];
    delete session.data['manual-start-date-date-input-year'];
    delete session.data['manual-end-date-date-input-day'];
    delete session.data['manual-end-date-date-input-month'];
    delete session.data['manual-end-date-date-input-year'];
    
    // Clear shared activity description
    delete session.data['manual-activity-details-text-area'];
    
    // Clear coordinate entry method and system
    delete session.data['manual-coordinate-entry-method'];
    delete session.data['manual-coordinate-system-radios'];
    
    // Clear Site 1 data
    delete session.data['manual-site-name-text-input'];
    delete session.data['manual-latitude'];
    delete session.data['manual-longitude'];
    delete session.data['manual-site-width'];
    
    // Clear Site 1 multiple coordinates
    for (let i = 1; i <= 5; i++) {
        delete session.data[`manual-coordinates-point-${i}-latitude`];
        delete session.data[`manual-coordinates-point-${i}-longitude`];
    }
    
    // Clear Site 2+ data (sites 2-20)
    for (let siteNum = 2; siteNum <= 20; siteNum++) {
        // Site names
        delete session.data[`manual-site-${siteNum}-name-text-input`];
        
        // Individual dates if different
        delete session.data[`manual-site-${siteNum}-start-date-date-input-day`];
        delete session.data[`manual-site-${siteNum}-start-date-date-input-month`];
        delete session.data[`manual-site-${siteNum}-start-date-date-input-year`];
        delete session.data[`manual-site-${siteNum}-end-date-date-input-day`];
        delete session.data[`manual-site-${siteNum}-end-date-date-input-month`];
        delete session.data[`manual-site-${siteNum}-end-date-date-input-year`];
        
        // Individual descriptions if different
        delete session.data[`manual-site-${siteNum}-activity-details-text-area`];
        
        // Coordinate methods and systems
        delete session.data[`manual-site-${siteNum}-coordinate-entry-method`];
        delete session.data[`manual-site-${siteNum}-coordinate-system-radios`];
        
        // Circular coordinates
        delete session.data[`manual-site-${siteNum}-latitude`];
        delete session.data[`manual-site-${siteNum}-longitude`];
        delete session.data[`manual-site-${siteNum}-site-width`];
        
        // Multiple coordinates
        for (let i = 1; i <= 5; i++) {
            delete session.data[`manual-site-${siteNum}-coordinates-point-${i}-latitude`];
            delete session.data[`manual-site-${siteNum}-coordinates-point-${i}-longitude`];
        }
    }
}

// Function to clear all file upload session data
function clearAllFileUploadData(session) {
    // Clear file upload specific data
    delete session.data['exemption-which-type-of-file-radios'];
    delete session.data['kml-file-upload'];
    
    // Clear activity dates settings for file upload
    delete session.data['exemption-same-activity-dates-for-sites'];
    delete session.data['previous-activity-dates-selection'];
    
    // Clear shared activity dates for file upload
    delete session.data['exemption-start-date-date-input-day'];
    delete session.data['exemption-start-date-date-input-month'];
    delete session.data['exemption-start-date-date-input-year'];
    delete session.data['exemption-end-date-date-input-day'];
    delete session.data['exemption-end-date-date-input-month'];
    delete session.data['exemption-end-date-date-input-year'];
    
    // Clear activity description settings for file upload
    delete session.data['exemption-same-activity-description-for-sites'];
    delete session.data['previous-activity-description-selection'];
    
    // Clear shared activity description for file upload
    delete session.data['exemption-activity-details-text-area'];
    
    // Clear individual site data for file upload
    for (let i = 1; i <= 4; i++) {
        delete session.data[`site-${i}-name`];
        delete session.data[`site-${i}-start-date-day`];
        delete session.data[`site-${i}-start-date-month`];
        delete session.data[`site-${i}-start-date-year`];
        delete session.data[`site-${i}-end-date-day`];
        delete session.data[`site-${i}-end-date-month`];
        delete session.data[`site-${i}-end-date-year`];
        delete session.data[`site-${i}-activity-description`];
        delete session.data[`site-${i}-map-image`];
    }
}

// Function to clear all coordinate method session data for fresh start
function clearAllCoordinateMethodData(session) {
    // Clear manual entry data
    clearAllManualEntryData(session);
    
    // Clear file upload data  
    clearAllFileUploadData(session);
    
    // Clear coordinate method selection
    delete session.data['exemption-how-do-you-want-to-provide-the-coordinates-radios'];
    
    // Clear coordinate data from old flow
    clearCoordinateData(session);
    clearMapData(session);
    
    // Clear any error states
    delete session.data['errorthispage'];
    delete session.data['errortypeone'];
    delete session.data['errortypetwo'];
    delete session.data['startdateerror'];
    delete session.data['enddateerror'];
    delete session.data['errors'];
    
    // Clear navigation flags
    delete session.data['fromReviewSiteDetails'];
    delete session.data['siteDetailsSaved'];
    delete session.data['current-site'];
    delete session.data['returnTo'];
}

// Add these new clearing functions
function clearAllLocationData(session) {
    // Clear coordinate data
    clearCoordinateData(session);
    
    // Clear coordinate system
    clearCoordinateSystem(session);
    
    // Clear coordinate type
    clearCoordinateType(session);
    
    // Clear method of providing coordinates
    delete session.data['exemption-how-do-you-want-to-provide-the-coordinates-radios'];
    
    // Clear file upload data
    delete session.data['exemption-which-type-of-file-radios'];
    delete session.data['kml-file-upload'];
    
    // Clear map data
    clearMapData(session);
}

function clearCoordinateSystem(session) {
    delete session.data['exemption-what-coordinate-system-radios'];
    clearCoordinateValues(session);
}

function clearCoordinateType(session) {
    delete session.data['coords-type'];
    delete session.data['exemption-how-do-you-want-to-enter-the-coordinates-radios']; // Clear the selection itself
    delete session.data['previous-coords-entry-method']; // Clear the tracking variable
    clearCoordinateValues(session);
}

function clearCoordinateValues(session) {
    // Clear circle data
    delete session.data['exemption-enter-the-coordinates-at-the-centre-point-latitude-text-input'];
    delete session.data['exemption-enter-the-coordinates-at-the-centre-point-longitude-text-input'];
    delete session.data['exemption-width-of-site-number-input'];
    
    // Clear square data
    delete session.data['exemption-what-are-the-coordinates-of-the-square-latitude-text-input'];
    delete session.data['exemption-what-are-the-coordinates-of-the-square-longitude-text-input'];
    delete session.data['exemption-width-of-square-number-input'];

    // Clear multiple coordinates data
    for (let i = 1; i <= 5; i++) {
        delete session.data[`coordinates-point-${i}-latitude`];
        delete session.data[`coordinates-point-${i}-longitude`];
    }
}

// Function to clear all site details data when cancelling to task list
function clearAllSiteDetails(session) {
    // Clear site location data
    clearAllLocationData(session);
    
    // Clear activity date settings
    delete session.data['exemption-same-activity-dates-for-sites'];
    delete session.data['previous-activity-dates-selection'];
    
    // Clear shared activity dates
    delete session.data['exemption-start-date-date-input-day'];
    delete session.data['exemption-start-date-date-input-month'];
    delete session.data['exemption-start-date-date-input-year'];
    delete session.data['exemption-end-date-date-input-day'];
    delete session.data['exemption-end-date-date-input-month'];
    delete session.data['exemption-end-date-date-input-year'];
    
    // Clear activity description settings
    delete session.data['exemption-same-activity-description-for-sites'];
    delete session.data['previous-activity-description-selection'];
    
    // Clear shared activity description
    delete session.data['exemption-activity-details-text-area'];
    
    // Clear sites array
    delete session.data['sites'];
    
    // For backward compatibility, also clear old site-specific data
    for (let i = 1; i <= 4; i++) {
        // Clear site name
        delete session.data[`site-${i}-name`];
        
        // Clear site-specific dates
        delete session.data[`site-${i}-start-date-day`];
        delete session.data[`site-${i}-start-date-month`];
        delete session.data[`site-${i}-start-date-year`];
        delete session.data[`site-${i}-end-date-day`];
        delete session.data[`site-${i}-end-date-month`];
        delete session.data[`site-${i}-end-date-year`];
        
        // Clear site-specific description
        delete session.data[`site-${i}-activity-description`];
        
        // Clear site-specific map image
        delete session.data[`site-${i}-map-image`];
    }
    
    // Clear any error states
    delete session.data['startdateerror'];
    delete session.data['enddateerror'];
    delete session.data['errorthispage'];
    delete session.data['errortypeone'];
    delete session.data['errortypetwo'];
    
    // Reset task status
    delete session.data['exempt-information-3-status'];
}

// Function to clear all data after method of providing site location
function clearDataAfterLocationMethod(session) {
    // Clear file type selection
    delete session.data['exemption-which-type-of-file-radios'];
    
    // Clear file upload data
    delete session.data['kml-file-upload'];
    
    // Clear activity date settings
    delete session.data['exemption-same-activity-dates-for-sites'];
    delete session.data['previous-activity-dates-selection'];
    
    // Clear shared activity dates
    delete session.data['exemption-start-date-date-input-day'];
    delete session.data['exemption-start-date-date-input-month'];
    delete session.data['exemption-start-date-date-input-year'];
    delete session.data['exemption-end-date-date-input-day'];
    delete session.data['exemption-end-date-date-input-month'];
    delete session.data['exemption-end-date-date-input-year'];
    
    // Clear activity description settings
    delete session.data['exemption-same-activity-description-for-sites'];
    delete session.data['previous-activity-description-selection'];
    
    // Clear shared activity description
    delete session.data['exemption-activity-details-text-area'];
}

// Function to clear all data after file type selection
function clearDataAfterFileType(session) {
    // Clear file upload data
    delete session.data['kml-file-upload'];
    
    // Clear activity date settings
    delete session.data['exemption-same-activity-dates-for-sites'];
    delete session.data['previous-activity-dates-selection'];
    
    // Clear shared activity dates
    delete session.data['exemption-start-date-date-input-day'];
    delete session.data['exemption-start-date-date-input-month'];
    delete session.data['exemption-start-date-date-input-year'];
    delete session.data['exemption-end-date-date-input-day'];
    delete session.data['exemption-end-date-date-input-month'];
    delete session.data['exemption-end-date-date-input-year'];
    
    // Clear activity description settings
    delete session.data['exemption-same-activity-description-for-sites'];
    delete session.data['previous-activity-description-selection'];
    
    // Clear shared activity description
    delete session.data['exemption-activity-details-text-area'];
}

// Function to clear all data after file upload
function clearDataAfterFileUpload(session) {
    // Clear activity date settings
    delete session.data['exemption-same-activity-dates-for-sites'];
    delete session.data['previous-activity-dates-selection'];
    
    // Clear shared activity dates
    delete session.data['exemption-start-date-date-input-day'];
    delete session.data['exemption-start-date-date-input-month'];
    delete session.data['exemption-start-date-date-input-year'];
    delete session.data['exemption-end-date-date-input-day'];
    delete session.data['exemption-end-date-date-input-month'];
    delete session.data['exemption-end-date-date-input-year'];
    
    // Clear activity description settings
    delete session.data['exemption-same-activity-description-for-sites'];
    delete session.data['previous-activity-description-selection'];
    
    // Clear shared activity description
    delete session.data['exemption-activity-details-text-area'];
}

//////////////////////////////////////////////////////////////////////////////////////////////
// Project name start
// NOT THE ONE IN THE TASK LIST - SEE BELOW FOR THAT ONE
// TEXT ENTRY
//////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'project-name-start-router', function (req, res) {
    // Turn off errors by default
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    // Check if the text input (Project name) is blank
    const projectTitle = req.session.data['exemption-project-name-text-input'];
    if (!projectTitle || projectTitle.trim() === "") {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
    }

    // Redirect based on errors
    if (req.session.data['errorthispage'] === "true") {
        res.redirect('project-name-start');
    } else {
        // Set the status to completed
        req.session.data['exempt-information-1-status'] = 'completed';
        
        // Check if we need to return to check answers
        if (req.session.data['camefromcheckanswers'] === 'true') {
            req.session.data['camefromcheckanswers'] = false;
            res.redirect('check-answers#project-name');
        } else {
            res.redirect('task-list');
        }
    }
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Project name
// NOT THE OPENING ONE 
// TEXT ENTRY
//////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'project-name-router', function (req, res) {
    // Turn off errors by default
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    // Check if the text input (Project name) is blank
    const projectTitle = req.session.data['exemption-project-name-text-input'];
    if (!projectTitle || String(projectTitle).trim() === "") {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
    }

    // Redirect based on errors
    if (req.session.data['errorthispage'] === "true") {
        res.redirect('project-name');
    } else {
        // Set the status to completed
        req.session.data['exempt-information-1-status'] = 'completed';
        
        // Check if we need to return to check answers
        if (req.session.data['camefromcheckanswers'] === 'true') {
            req.session.data['camefromcheckanswers'] = false;
            res.redirect('check-answers-multiple-sites');
        } else {
            res.redirect('task-list');
        }
    }
});

router.get('/' + version + section + 'project-name', function (req, res) {
    req.session.data['headerNameExemption'] = 'Apply for a marine licence';
    res.render(version + section + 'project-name');
});

///////////////////////////////////////////////////////////////////////////////////////////////
// Activity dates
// DATE ENTRY -  both start and end
//////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'activity-dates-router', function (req, res) {
    // Reset separate error flags
    req.session.data['startdateerror'] = "false";
    req.session.data['enddateerror'] = "false";

    // Retrieve the start date values
    const startDay   = req.session.data['exemption-start-date-date-input-day'];
    const startMonth = req.session.data['exemption-start-date-date-input-month'];
    const startYear  = req.session.data['exemption-start-date-date-input-year'];

    // Retrieve the end date values
    const endDay   = req.session.data['exemption-end-date-date-input-day'];
    const endMonth = req.session.data['exemption-end-date-date-input-month'];
    const endYear  = req.session.data['exemption-end-date-date-input-year'];

    // Check if the start date is missing any field
    if (!startDay || !startMonth || !startYear) {
        req.session.data['startdateerror'] = "true";
    }

    // Check if the end date is missing any field
    if (!endDay || !endMonth || !endYear) {
        req.session.data['enddateerror'] = "true";
    }

    // If either date is incomplete, redirect back to show the errors
    if (req.session.data['startdateerror'] === "true" || req.session.data['enddateerror'] === "true") {
        return res.redirect('activity-dates');
    }
    
    // Check if we're coming from review-site-details page
    const returnTo = req.session.data['returnTo'];
    if (returnTo === 'review-site-details') {
        delete req.session.data['returnTo']; // Clear the return flag
        
        // Look for anchor in referrer URL
        const referer = req.headers.referer || '';
        const hashPosition = referer.indexOf('#');
        
        if (hashPosition > -1) {
            // Extract the anchor and redirect with it
            const anchor = referer.substring(hashPosition);
            return res.redirect('review-site-details' + anchor);
        }
        
        return res.redirect('review-site-details');
    }

    // Default behavior - go to the activity description question
    res.redirect('same-activity-description');
});

router.get('/' + version + section + 'activity-dates', function (req, res) {
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'activity-dates');
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Activity details
// TEXT ENTRY (TEXTAREA)
/////////////////////////////////////////////////////////////////////////////////////////////

// Fix the route for activity-details GET request
router.get('/' + version + section + 'activity-details', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errors'] = [];

    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }

    res.render(version + section + 'activity-details');
});

// Fix the route handler for activity details POST request
router.post('/' + version + section + 'activity-details-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const activityDetails = req.session.data['exemption-activity-details-text-area'];
    if (!activityDetails || activityDetails.trim() === "") {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        return res.redirect('activity-details');
    }

    // Check if we're coming from review-site-details page
    const returnTo = req.session.data['returnTo'];
    if (returnTo === 'review-site-details') {
        delete req.session.data['returnTo']; // Clear the return flag
        
        // Look for anchor in referrer URL
        const referer = req.headers.referer || '';
        const hashPosition = referer.indexOf('#');
        
        if (hashPosition > -1) {
            // Extract the anchor and redirect with it
            const anchor = referer.substring(hashPosition);
            return res.redirect('review-site-details' + anchor);
        }
        
        return res.redirect('review-site-details');
    }

    // Default behavior - go to review-site-details
    res.redirect('review-site-details');
});

// Maintain the existing about-your-activity-router for backward compatibility
router.post('/' + version + section + 'about-your-activity-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const activityDetails = req.session.data['exemption-activity-details-text-area'];
    if (!activityDetails || activityDetails.trim() === "") {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        res.redirect('about-your-activity');
    } else {
        // If the user came from check answers, return there
        if (req.session.data['camefromcheckanswers'] === 'true') {
            req.session.data['camefromcheckanswers'] = false;
            res.redirect('check-answers#about-your-activity');
        } else {
            res.redirect('start-date');
        }
    }
});


//////////////////////////////////////////////////////////////////////////////////////////////
// Public Register
// RADIO BUTTONS WITH CONDITIONAL TEXTAREA
/////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'public-register-router', function (req, res) {
    // Reset error states
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errortypetwo'] = "false";

    // Clear text area if user changes from Yes to No
    if (req.session.data['exemption-public-register-radios'] === 'No') {
        delete req.session.data['exemption-public-register-text-area'];
    }

    // Check if the radio option is selected
    if (
        req.session.data['exemption-public-register-radios'] == undefined ||
        req.session.data['exemption-public-register-radios'].trim() == ""
    ) {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        res.redirect('public-register');
    } 
    // If "Yes" is selected, ensure the textarea is not empty
    else if (
        req.session.data['exemption-public-register-radios'] == "Yes" &&
        (req.session.data['exemption-public-register-text-area'] == undefined ||
         req.session.data['exemption-public-register-text-area'].trim() == "")
    ) {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypetwo'] = "true";
        res.redirect('public-register');
    } else {
       // Set the status to completed
       req.session.data['exempt-information-4-status'] = 'completed';
       
       // Check if we need to return to check answers
       if (req.session.data['camefromcheckanswers'] === 'true') {
            req.session.data['camefromcheckanswers'] = false;
            res.redirect('check-answers-multiple-sites');
        } else {
            res.redirect('task-list');
        }
    }
});

// Map router
router.post('/' + version + section + 'map-router', function (req, res) {
    // Set siteTitle
    req.session.data['siteTitle'] = 'review';
    res.redirect('review-location');
});


//////////////////////////////////////////////////////////////////////////////////////////////
// Check answers
/////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'check-answers-router', function (req, res) {
    req.session.data['applicationSubmitted'] = 'true';
    // Redirect to review location page
    res.redirect('confirmation');
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Check answers multiple sites
/////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'check-answers-router', function (req, res) {
    req.session.data['applicationSubmitted'] = 'true';
    // Redirect to confirmation page
    res.redirect('confirmation');
});


// Add route handler for check-answers-multiple-sites page
router.get('/' + version + section + 'check-answers-multiple-sites', function (req, res) {
    // Ensure the site details are marked as saved when reaching check answers
    req.session.data['siteDetailsSaved'] = true;
    
    // Render the page
    res.render(version + section + 'check-answers-multiple-sites');
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Delete project router
/////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'delete-router', function (req, res) {
    // Get the project to delete from the query parameter
    const projectToDelete = req.query.project;
    
    if (projectToDelete === 'user') {
        // Delete the user's project
        req.session.data['userProjectDeleted'] = 'true';
    } else if (projectToDelete === 'tower-bridge') {
        // Delete the Tower Bridge project
        req.session.data['towerBridgeProjectDeleted'] = 'true';
    } else {
        // Fallback to old behavior for backward compatibility
        req.session.data['deleteProject'] = 'true';
    }
    
    // Redirect to Your projects page
    res.redirect('home');
});

// Home page initialization - ensure project deletion flags are properly set
router.get('/' + version + section + 'home', function (req, res) {
    // Initialize flags if they don't exist already
    if (req.session.data['userProjectDeleted'] === undefined) {
        req.session.data['userProjectDeleted'] = 'false';
    }
    
    if (req.session.data['towerBridgeProjectDeleted'] === undefined) {
        req.session.data['towerBridgeProjectDeleted'] = 'false';
    }
    
    if (req.session.data['deleteProject'] === undefined) {
        req.session.data['deleteProject'] = 'false';
    }
    
    // Render the home page
    res.render(version + section + 'home');
});

// Manual site name router
router.post('/' + version + section + 'manual-site-name-router', function (req, res) {
    // Reset error flags
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    
    // Get the site number
    const siteNum = req.session.data['site'];
    
    // Validate input
    if (!req.session.data['manual-site-name-input'] || req.session.data['manual-site-name-input'].trim() === '') {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        res.redirect('manual-site-name');
    } else {
        // Save the site name to the site-specific variable
        req.session.data['site-' + siteNum + '-name'] = req.session.data['manual-site-name-input'];
        
        // Clear the temporary input field
        req.session.data['manual-site-name-input'] = '';
        
        // Redirect back to the review site details page
        const returnSection = req.session.data['return'] || '';
        res.redirect('review-site-details#site-' + siteNum + '-details');
    }
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Delete site confirmation
// CONFIRMATION PAGE
/////////////////////////////////////////////////////////////////////////////////////////////

router.get('/' + version + section + 'delete-site', function (req, res) {
    // Make site parameter available to the template
    const siteIndex = parseInt(req.query.site) || 1;
    const returnTo = req.query.return || 'review-site-details';
    
    // Store these values in the session for use in the POST handler
    req.session.data['site'] = siteIndex;
    req.session.data['returnTo'] = returnTo;
    
    // Render the delete site confirmation page
    res.render(version + section + 'delete-site');
});

router.post('/' + version + section + 'delete-site-router', function (req, res) {
    // Get the site index from the session (1-based)
    const siteIndex = parseInt(req.session.data['site']) || 1;
    
    // Get the return page from the session
    const returnTo = req.session.data['returnTo'] || 'review-site-details';
    
    // Get the sites array
    const sites = req.session.data['sites'] || [];
    
    // Only proceed if we have sites and the index is valid
    if (sites.length > 0 && siteIndex > 0 && siteIndex <= sites.length) {
        // Remove the site at the specified index (convert from 1-based to 0-based)
        sites.splice(siteIndex - 1, 1);
        
        // Save the updated array back to the session
        req.session.data['sites'] = sites;
    }
    
    // Redirect based on the returnTo value
    if (returnTo === 'review-site-details') {
        res.redirect('review-site-details#site-' + siteIndex + '-details');
    } else if (returnTo === 'site-details-added') {
        res.redirect('site-details-added');
    } else if (returnTo === 'check-answers-multiple-sites') {
        res.redirect('check-answers-multiple-sites');
    } else {
        // Default fallback
        res.redirect('review-site-details');
    }
});

// When returning to site-details from task list, initialize the flow
router.get('/' + version + section + 'site-details', function (req, res) {
    // Set the flag to false when starting the site details journey
    req.session.data['siteDetailsSaved'] = false;
    
    // Render the page
    res.render(version + section + 'site-details');
});

// Route handler for review-site-details
router.get('/' + version + section + 'review-site-details', function (req, res) {
    // If we have the camefromcheckanswers query parameter, set the flag
    if (req.query.camefromcheckanswers === 'true') {
        req.session.data['camefromcheckanswers'] = 'true';
    }
    
    // If we have a site query parameter, set the active site
    if (req.query.site) {
        req.session.data['site'] = req.query.site;
    }
    
    // Set a flag to indicate we're coming from review-site-details
    // This will help maintain data when cancelling from edit pages
    req.session.data['fromReviewSiteDetails'] = 'true';
    
    // Render the page
    res.render(version + section + 'review-site-details');
});

//////////////////////////////////////////////////////////////////////////////////////////////
// How do you want to provide the coordinates?
// PAGE OF RADIO BUTTONS
/////////////////////////////////////////////////////////////////////////////////////////////

// GET route handler for the "How do you want to provide coordinates" page
router.get('/' + version + section + 'how-do-you-want-to-provide-the-coordinates', function (req, res) {
    // Clear error states when loading the page
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errors'] = [];
    
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    } else if (!req.query.returnTo) {
        // If starting new journey, set the flag to false
        req.session.data['siteDetailsSaved'] = false;
    }
    
    res.render(version + section + 'how-do-you-want-to-provide-the-coordinates');
});

router.post('/' + version + section + 'how-do-you-want-to-provide-the-coordinates-router', function (req, res) {
    // Turn errors off by default
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const selection = req.session.data['exemption-how-do-you-want-to-provide-the-coordinates-radios'];

    if (!selection) {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        res.redirect('how-do-you-want-to-provide-the-coordinates');
        return;
    }

    // Clear data based on selection
    switch(selection) {
        case "Enter the coordinates of the site manually":
            // Clear file upload data if it exists
            delete req.session.data['exemption-which-type-of-file-radios'];
            delete req.session.data['kml-file-upload'];
            break;
        case "Upload a file with the coordinates of the site":
            // Clear manual entry data if it exists
            clearAllManualEntryData(req.session);
            break;
    }

    // Route based on selection
    switch(selection) {
        case "Enter the coordinates of the site manually":
            res.redirect('manual-entry/does-your-project-involve-more-than-one-site');
            break;
        case "Upload a file with the coordinates of the site":
            res.redirect('which-type-of-file');
            break;
        default:
            res.redirect('how-do-you-want-to-provide-the-coordinates');
    }
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Which type of file do you want to upload?
// PAGE OF RADIO BUTTONS
/////////////////////////////////////////////////////////////////////////////////////////////

// GET route handler for the "Which type of file" page
router.get('/' + version + section + 'which-type-of-file', function (req, res) {
    // Clear error states when loading the page
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errors'] = [];
    
    // Check if we're returning from review-site-details
    if (req.session.data['fromReviewSiteDetails'] === 'true') {
        // Keep the flag
    } else if (req.session.data['returnTo'] === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'which-type-of-file');
});

router.post('/' + version + section + 'which-type-of-file-router', function (req, res) {
    // Turn errors off by default
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const selection = req.session.data['exemption-which-type-of-file-radios'];

    if (!selection) {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        res.redirect('which-type-of-file');
        return;
    }

    // Route based on selection
    switch(selection) {
        case "KML":
            res.redirect('upload-file');
            break;
        case "Shapefile":
            res.redirect('upload-file');
            break;
        default:
            res.redirect('which-type-of-file');
    }
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Upload KML File
// FILE UPLOAD PAGE
/////////////////////////////////////////////////////////////////////////////////////////////

// GET route handler for the "Upload file" page
router.get('/' + version + section + 'upload-file', function (req, res) {
    // Clear error states when loading the page
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errors'] = [];
    
    // Check if we're returning from review-site-details
    if (req.session.data['fromReviewSiteDetails'] === 'true') {
        // Keep the flag
    } else if (req.session.data['returnTo'] === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'upload-file');
});

router.post('/' + version + section + 'upload-file-router', function (req, res) {
    req.session.data['siteTitle'] = 'review';
    
    // Initialize sites array with sample data including timestamps
    // In a real implementation, this would parse the uploaded file
    const currentTime = new Date().toISOString();
    req.session.data['sites'] = [
        {
            name: 'Sediment sample 1',
            description: '',
            startDate: {
                day: '',
                month: '',
                year: ''
            },
            endDate: {
                day: '',
                month: '',
                year: ''
            },
            mapImage: '/public/images/worthing-map-drawn-copy.jpg',
            addedAt: currentTime,
            entryMethod: 'file-upload'
        },
        {
            name: 'Sediment sample 2',
            description: '',
            startDate: {
                day: '',
                month: '',
                year: ''
            },
            endDate: {
                day: '',
                month: '',
                year: ''
            },
            mapImage: '/public/images/worthing-map-square-copy.jpg',
            addedAt: currentTime,
            entryMethod: 'file-upload'
        },
        {
            name: '',
            description: '',
            startDate: {
                day: '',
                month: '',
                year: ''
            },
            endDate: {
                day: '',
                month: '',
                year: ''
            },
            mapImage: '/public/images/worthing-map-4-points-copy.jpg',
            addedAt: currentTime,
            entryMethod: 'file-upload'
        },
        {
            name: '',
            description: '',
            startDate: {
                day: '',
                month: '',
                year: ''
            },
            endDate: {
                day: '',
                month: '',
                year: ''
            },
            mapImage: '/public/images/worthing-map-5-points-copy.jpg',
            addedAt: currentTime,
            entryMethod: 'file-upload'
        }
    ];
    
    // After uploading file, go to same-activity-dates question
    res.redirect('same-activity-dates');
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Are the activity dates the same for every site?
// RADIO BUTTONS
/////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'same-activity-dates-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const selection = req.session.data['exemption-same-activity-dates-for-sites'];
    const previousSelection = req.session.data['previous-activity-dates-selection'];

    if (!selection) {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        res.redirect('same-activity-dates');
        return;
    }

    // Store the current selection for future comparison
    req.session.data['previous-activity-dates-selection'] = selection;

    // Check if we're coming from review-site-details page
    const returnTo = req.session.data['returnTo'];
    
    // Route based on selection
    switch(selection) {
        case "Yes":
            // If dates are the same for all sites, take them to the activity-dates page
            // Pass the returnTo parameter so activity-dates knows where to return
            if (returnTo === 'review-site-details') {
                req.session.data['returnTo'] = 'review-site-details';
                res.redirect('activity-dates');
            } else {
                res.redirect('activity-dates');
            }
            break;
        case "No":
            // If coming from review page and changing from Yes to No
            if (returnTo === 'review-site-details' && previousSelection === "Yes") {
                // Clear shared activity dates
                delete req.session.data['exemption-start-date-date-input-day'];
                delete req.session.data['exemption-start-date-date-input-month'];
                delete req.session.data['exemption-start-date-date-input-year'];
                delete req.session.data['exemption-end-date-date-input-day'];
                delete req.session.data['exemption-end-date-date-input-month'];
                delete req.session.data['exemption-end-date-date-input-year'];
                
                // Return to review page
                delete req.session.data['returnTo'];
                res.redirect('review-site-details');
            } else {
                // If dates are different for each site, skip to activity description question
                // We'll collect site-specific dates later
                res.redirect('same-activity-description');
            }
            break;
        default:
            res.redirect('same-activity-dates');
    }
});

router.get('/' + version + section + 'same-activity-dates', function (req, res) {
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'same-activity-dates');
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Is the activity description the same for every site?
// RADIO BUTTONS
/////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'same-activity-description-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const selection = req.session.data['exemption-same-activity-description-for-sites'];
    const previousSelection = req.session.data['previous-activity-description-selection'];

    if (!selection) {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        res.redirect('same-activity-description');
        return;
    }

    // Store the current selection for future comparison
    req.session.data['previous-activity-description-selection'] = selection;

    // Check if we're coming from review-site-details page
    const returnTo = req.session.data['returnTo'];
    
    // Route based on selection
    switch(selection) {
        case "Yes":
            // If description is the same for all sites, take them to the activity-details page
            if (returnTo === 'review-site-details') {
                req.session.data['returnTo'] = 'review-site-details';
                res.redirect('activity-details');
            } else {
                res.redirect('activity-details');
            }
            break;
        case "No":
            // If coming from review page and changing from Yes to No
            if (returnTo === 'review-site-details' && previousSelection === "Yes") {
                // Clear shared activity description
                delete req.session.data['exemption-activity-details-text-area'];
                
                // Return to review page
                delete req.session.data['returnTo'];
                res.redirect('review-site-details');
            } else {
                // If description is different for each site, skip to review-site-details
                // We'll collect site-specific descriptions later
                res.redirect('review-site-details');
            }
            break;
        default:
            res.redirect('same-activity-description');
    }
});

router.get('/' + version + section + 'same-activity-description', function (req, res) {
    // Check if we're returning from review-site-details
    if (req.query.returnTo === 'review-site-details') {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    res.render(version + section + 'same-activity-description');
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Site-specific name
// TEXT ENTRY
/////////////////////////////////////////////////////////////////////////////////////////////

// GET handler for site-name
router.get('/' + version + section + 'site-name', function (req, res) {
    // Check if we're returning from review-site-details
    if (req.query.return && req.query.return.includes('site-')) {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    // If we have a site query parameter, set the active site
    if (req.query.site) {
        req.session.data['site'] = req.query.site;
    }
    
    res.render(version + section + 'site-name');
});

router.post('/' + version + section + 'site-name-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";

    const siteName = req.session.data['site-name-text-input'];

    if (!siteName || siteName.trim() === "") {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        return res.redirect('site-name');
    }

    // Get sites array and current index
    const sites = req.session.data['sites'] || [];
    const siteIndex = parseInt(req.session.data['site']) || null;
    
    // If we're editing an existing site
    if (siteIndex && sites.length >= siteIndex) {
        // Update existing site (convert from 1-based to 0-based index)
        sites[siteIndex - 1].name = siteName;
    } else {
        // Add a new site with timestamp
        const currentTime = new Date().toISOString();
        sites.push({
            name: siteName,
            addedAt: currentTime,
            entryMethod: 'file-upload'
        });
    }
    
    // Save the updated array
    req.session.data['sites'] = sites;

    // Extract the return parameter which contains the section name
    const returnSection = req.session.data['return'];
    
    // If we need site-specific dates and we're not returning to somewhere else
    if (req.session.data['exemption-same-activity-dates-for-sites'] === "No" && !returnSection) {
        // Go to site-specific dates page
        return res.redirect('site-activity-dates?site=' + req.session.data['sites'].length);
    } 
    // If we need site-specific descriptions and we're not returning to somewhere else
    else if (req.session.data['exemption-same-activity-description-for-sites'] === "No" && !returnSection) {
        // Go to site-specific description page
        return res.redirect('site-activity-description?site=' + req.session.data['sites'].length);
    }
    else if (returnSection) {
        // Redirect back to review-site-details with the anchor
        return res.redirect('review-site-details#' + returnSection);
    }
    else {
        // Default: return to site-details-added list
        return res.redirect('site-details-added');
    }
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Site-specific activity dates
// DATE ENTRY - both start and end
//////////////////////////////////////////////////////////////////////////////////////////////

// GET handler for site-activity-dates
router.get('/' + version + section + 'site-activity-dates', function (req, res) {
    // Check if we're returning from review-site-details
    if (req.query.return && req.query.return.includes('site-')) {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    // If we have a site query parameter, set the active site
    if (req.query.site) {
        req.session.data['site'] = req.query.site;
    }
    
    res.render(version + section + 'site-activity-dates');
});

// POST handler for site-activity-dates
router.post('/' + version + section + 'site-activity-dates-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    req.session.data['errortypetwo'] = "false";
    req.session.data['startdateerror'] = "false";
    req.session.data['enddateerror'] = "false";

    const siteIndex = parseInt(req.session.data['site']) || 1;
    
    // Validate input data - start date
    const sitePrefix = 'site-' + siteIndex + '-';
    const startDay = req.session.data[sitePrefix + 'start-date-day'];
    const startMonth = req.session.data[sitePrefix + 'start-date-month'];
    const startYear = req.session.data[sitePrefix + 'start-date-year'];
    
    // Validate input data - end date
    const endDay = req.session.data[sitePrefix + 'end-date-day'];
    const endMonth = req.session.data[sitePrefix + 'end-date-month'];
    const endYear = req.session.data[sitePrefix + 'end-date-year'];

    // Check if any fields are missing
    if (!startDay || !startMonth || !startYear || !endDay || !endMonth || !endYear) {
        req.session.data['errorthispage'] = "true";
        
        // Set which specific fields have errors
        if (!startDay || !startMonth || !startYear) {
            req.session.data['errortypeone'] = "true";
            req.session.data['startdateerror'] = "true";
        }
        
        if (!endDay || !endMonth || !endYear) {
            req.session.data['errortypetwo'] = "true";
            req.session.data['enddateerror'] = "true";
        }
        
        return res.redirect('site-activity-dates?site=' + siteIndex);
    }

    // Update the site in the sites array
    const sites = req.session.data['sites'] || [];
    if (sites.length >= siteIndex) {
        // Create the date objects if they don't exist
        if (!sites[siteIndex-1].startDate) {
            sites[siteIndex-1].startDate = {};
        }
        
        if (!sites[siteIndex-1].endDate) {
            sites[siteIndex-1].endDate = {};
        }
        
        // Update the dates
        sites[siteIndex-1].startDate = {
            day: startDay,
            month: startMonth,
            year: startYear
        };
        
        sites[siteIndex-1].endDate = {
            day: endDay,
            month: endMonth,
            year: endYear
        };
        
        // Save the updated array back to the session
        req.session.data['sites'] = sites;
    }
    
    // Extract the return parameter which contains the section name
    const returnSection = req.session.data['return'];
    
    if (returnSection) {
        // Redirect back to review-site-details with the anchor
        return res.redirect('review-site-details#' + returnSection);
    }
    
    // Default: return to review-site-details without anchor
    res.redirect('review-site-details');
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Site-specific activity description
// TEXT ENTRY (TEXTAREA)
/////////////////////////////////////////////////////////////////////////////////////////////

// GET handler for site-activity-description
router.get('/' + version + section + 'site-activity-description', function (req, res) {
    // Check if we're returning from review-site-details
    if (req.query.return && req.query.return.includes('site-')) {
        req.session.data['fromReviewSiteDetails'] = 'true';
    }
    
    // If we have a site query parameter, set the active site
    if (req.query.site) {
        req.session.data['site'] = req.query.site;
    }
    
    res.render(version + section + 'site-activity-description');
});

// POST handler for site-activity-description
router.post('/' + version + section + 'site-activity-description-router', function (req, res) {
    req.session.data['errorthispage'] = "false";
    req.session.data['errortypeone'] = "false";
    
    const siteIndex = parseInt(req.session.data['site']) || 1;
    const description = req.session.data['site-' + siteIndex + '-activity-description'];
    
    if (!description || description.trim() === "") {
        req.session.data['errorthispage'] = "true";
        req.session.data['errortypeone'] = "true";
        return res.redirect('site-activity-description?site=' + siteIndex);
    }
    
    // Update the site in the sites array
    const sites = req.session.data['sites'] || [];
    if (sites.length >= siteIndex) {
        // Update the description - save to description property to match what the review template checks
        sites[siteIndex-1].description = description;
        
        // Save the updated array back to the session
        req.session.data['sites'] = sites;
    }
    
    // Extract the return parameter which contains the section name
    const returnSection = req.session.data['return'];
    
    if (returnSection) {
        // Redirect back to review-site-details with the anchor
        return res.redirect('review-site-details#' + returnSection);
    }
    
    // Default: return to review-site-details without anchor
    res.redirect('review-site-details');
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Review Site Details
// REVIEW PAGE
/////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'review-site-details-router', function (req, res) {
    // Check if any site is incomplete
    let hasSiteIncomplete = false;
    
    // Get the sites array
    const sites = req.session.data['sites'] || [];
    
    if (sites.length > 0) {
        // Check each site for completeness
        for (const site of sites) {
            // Check if site name is missing
            if (!site.name) {
                hasSiteIncomplete = true;
            }
            
            // Check if site-specific dates are required but incomplete
            if (req.session.data['exemption-same-activity-dates-for-sites'] === "No") {
                if (!site.startDate || !site.startDate.day) {
                    hasSiteIncomplete = true;
                }
            }
            
            // Check if site-specific descriptions are required but incomplete
            if (req.session.data['exemption-same-activity-description-for-sites'] === "No") {
                if (!site.description) {
                    hasSiteIncomplete = true;
                }
            }
        }
        
        // Set status based on completeness
        if (hasSiteIncomplete) {
            // Mark as in progress if any site is incomplete
            req.session.data['exempt-information-3-status'] = 'in-progress';
        } else {
            // Mark as completed if all sites are complete
            req.session.data['exempt-information-3-status'] = 'completed';
        }
    } else {
        // No sites exist
        req.session.data['exempt-information-3-status'] = 'cannot-start';
    }
    
    // Set the flag to indicate site details have been saved
    req.session.data['siteDetailsSaved'] = true;
    
    // Clear the fromReviewSiteDetails flag since we're leaving the page
    delete req.session.data['fromReviewSiteDetails'];
    
    // Check if we came from check-answers-multiple-sites
    if (req.session.data['camefromcheckanswers'] === 'true') {
        req.session.data['camefromcheckanswers'] = false;
        res.redirect('check-answers-multiple-sites');
    } else {
        // Otherwise redirect to the site-details-added page
        res.redirect('site-details-added');
    }
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Site details added
// PAGE WITH TABLE OF SITES
/////////////////////////////////////////////////////////////////////////////////////////////

router.post('/' + version + section + 'site-details-added-router', function (req, res) {
    // Reset error flag
    req.session.data['errorthispage'] = "false";
    
    // Check if any site is incomplete
    let hasSiteIncomplete = false;
    
    // Get the sites array
    const sites = req.session.data['sites'] || [];
    
    // Check each site for completeness
    if (sites.length > 0) {
        for (const site of sites) {
            // Check if site name is missing
            if (!site.name) {
                hasSiteIncomplete = true;
            }
            
            // Check if site-specific dates are required but incomplete
            if (req.session.data['exemption-same-activity-dates-for-sites'] === "No") {
                if (!site.startDate || !site.startDate.day) {
                    hasSiteIncomplete = true;
                }
            }
            
            // Check if site-specific descriptions are required but incomplete
            if (req.session.data['exemption-same-activity-description-for-sites'] === "No") {
                if (!site.description) {
                    hasSiteIncomplete = true;
                }
            }
        }
    }
    
    // Check if "I've finished adding sites" checkbox is checked
    if (req.session.data['finished-adding-sites'] && req.session.data['finished-adding-sites'].includes('yes')) {
        if (hasSiteIncomplete) {
            // Set error flag if sites are incomplete and checkbox is checked
            req.session.data['errorthispage'] = "true";
            res.redirect('site-details-added');
            return;
        } else {
            // Mark the section as completed if all sites are complete
            req.session.data['exempt-information-3-status'] = 'completed';
        }
    } else {
        // Mark the section as in progress
        req.session.data['exempt-information-3-status'] = 'in-progress';
    }
    
    // Redirect to task list if no errors
    res.redirect('task-list');
});

//////////////////////////////////////////////////////////////////////////////////////////////
// Add another site - clear all data and start fresh coordinate method selection
/////////////////////////////////////////////////////////////////////////////////////////////

// Route handler for "Add another site" functionality
router.get('/' + version + section + 'add-another-site', function (req, res) {
    // Clear all coordinate method data for a fresh start
    clearAllCoordinateMethodData(req.session);
    
    // Redirect to coordinate method selection page
    res.redirect('how-do-you-want-to-provide-the-coordinates');
});

}